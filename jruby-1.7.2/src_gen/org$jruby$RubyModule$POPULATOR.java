/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyModule$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyModule$INVOKER$s$0$0$nesting(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "nesting", true, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyModule.class, "nesting", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("nesting", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule","nesting","nesting");
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$method_removed(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "method_removed", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "method_removed", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method_removed", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_eqq(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_eqq", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_eqq", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$private_class_method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_class_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "private_class_method", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private_class_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$included_modules(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "included_modules", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "included_modules", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("included_modules", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$2$0$const_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "const_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("const_set", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_ge(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_ge", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$module_eval(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "module_eval", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "module_eval", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("module_eval", javaMethod);
        cls.addMethodAtBootTimeOnly("class_eval", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$rbPrivate(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbPrivate", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "rbPrivate", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_cmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$remove_const(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "remove_const", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "remove_const", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("remove_const", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$module_function(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "module_function", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "module_function", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("module_function", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$rbProtected(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbProtected", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "rbProtected", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("protected", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$module_exec(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "module_exec", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "module_exec", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("module_exec", javaMethod);
        cls.addMethodAtBootTimeOnly("class_exec", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$method_added(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "method_added", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "method_added", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method_added", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$include_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "include_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "include_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$name(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "name", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "name", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("name", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$public_class_method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_class_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "public_class_method", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public_class_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$ancestors(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "ancestors", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "ancestors", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("ancestors", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$protected_method_defined(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "protected_method_defined", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "protected_method_defined", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("protected_method_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$method_undefined(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "method_undefined", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "method_undefined", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method_undefined", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "initialize", false, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyModule.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$private_method_defined(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "private_method_defined", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "private_method_defined", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("private_method_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$extend_object(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "extend_object", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "extend_object", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("extend_object", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "hash", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$method_defined_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "method_defined_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "method_defined_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$instance_method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "instance_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "instance_method", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$extended(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "extended", false, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyModule.class, "extended", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("extended", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$remove_method(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "remove_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "remove_method", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("remove_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$append_features(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "append_features", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "append_features", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("append_features", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$undef_method(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "undef_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "undef_method", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("undef_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$attr_accessor(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "attr_accessor", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "attr_accessor", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("attr_accessor", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$include(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "include", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "include", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("include", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$class_variable_defined_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "class_variable_defined_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variable_defined_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class_variable_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$define_method(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "define_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "define_method", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("define_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$attr_writer(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "attr_writer", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "attr_writer", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("attr_writer", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$2$0$alias_method(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 2, "alias_method", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "alias_method", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("alias_method", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_le(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_le", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$freeze(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "freeze", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "freeze", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("freeze", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$attr_reader(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "attr_reader", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "attr_reader", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("attr_reader", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$public_method_defined(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "public_method_defined", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "public_method_defined", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("public_method_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$const_missing(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "const_missing", false, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyModule.class, "const_missing", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("const_missing", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$rbPublic(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbPublic", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "rbPublic", org.jruby.RubyModule.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$included(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "included", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "included", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("included", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_gt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_gt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$op_lt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "op_lt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule","method_removed","method_removed");
        runtime.addBoundMethod("org.jruby.RubyModule","op_eqq","===");
        runtime.addBoundMethod("org.jruby.RubyModule","private_class_method","private_class_method");
        runtime.addBoundMethod("org.jruby.RubyModule","included_modules","included_modules");
        runtime.addBoundMethod("org.jruby.RubyModule","const_set","const_set");
        runtime.addBoundMethod("org.jruby.RubyModule","op_ge",">=");
        runtime.addBoundMethod("org.jruby.RubyModule","module_eval","module_eval");
        runtime.addBoundMethod("org.jruby.RubyModule","rbPrivate","private");
        runtime.addBoundMethod("org.jruby.RubyModule","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyModule","op_cmp","<=>");
        runtime.addBoundMethod("org.jruby.RubyModule","remove_const","remove_const");
        runtime.addBoundMethod("org.jruby.RubyModule","module_function","module_function");
        runtime.addBoundMethod("org.jruby.RubyModule","rbProtected","protected");
        runtime.addBoundMethod("org.jruby.RubyModule","module_exec","module_exec");
        runtime.addBoundMethod("org.jruby.RubyModule","method_added","method_added");
        runtime.addBoundMethod("org.jruby.RubyModule","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyModule","include_p","include?");
        runtime.addBoundMethod("org.jruby.RubyModule","name","name");
        runtime.addBoundMethod("org.jruby.RubyModule","public_class_method","public_class_method");
        runtime.addBoundMethod("org.jruby.RubyModule","ancestors","ancestors");
        runtime.addBoundMethod("org.jruby.RubyModule","protected_method_defined","protected_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","method_undefined","method_undefined");
        runtime.addBoundMethod("org.jruby.RubyModule","initialize","initialize");
        runtime.addBoundMethod("org.jruby.RubyModule","private_method_defined","private_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","extend_object","extend_object");
        runtime.addBoundMethod("org.jruby.RubyModule","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyModule","method_defined_p","method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","instance_method","instance_method");
        runtime.addBoundMethod("org.jruby.RubyModule","extended","extended");
        runtime.addBoundMethod("org.jruby.RubyModule","remove_method","remove_method");
        runtime.addBoundMethod("org.jruby.RubyModule","append_features","append_features");
        runtime.addBoundMethod("org.jruby.RubyModule","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyModule","undef_method","undef_method");
        runtime.addBoundMethod("org.jruby.RubyModule","attr_accessor","attr_accessor");
        runtime.addBoundMethod("org.jruby.RubyModule","include","include");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variable_defined_p","class_variable_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","define_method","define_method");
        runtime.addBoundMethod("org.jruby.RubyModule","attr_writer","attr_writer");
        runtime.addBoundMethod("org.jruby.RubyModule","alias_method","alias_method");
        runtime.addBoundMethod("org.jruby.RubyModule","op_le","<=");
        runtime.addBoundMethod("org.jruby.RubyModule","freeze","freeze");
        runtime.addBoundMethod("org.jruby.RubyModule","attr_reader","attr_reader");
        runtime.addBoundMethod("org.jruby.RubyModule","public_method_defined","public_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","const_missing","const_missing");
        runtime.addBoundMethod("org.jruby.RubyModule","rbPublic","public");
        runtime.addBoundMethod("org.jruby.RubyModule","included","included");
        runtime.addBoundMethod("org.jruby.RubyModule","op_gt",">");
        runtime.addBoundMethod("org.jruby.RubyModule","op_lt","<");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$const_get(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "const_get", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_get", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("const_get", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$2$0$class_variable_set(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 2, "class_variable_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variable_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class_variable_set", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$class_variables(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "class_variables", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variables", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("class_variables", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$remove_class_variable(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "remove_class_variable", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "remove_class_variable", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("remove_class_variable", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$protected_instance_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "protected_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "protected_instance_methods", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("protected_instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$const_defined_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "const_defined_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_defined_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("const_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$class_variable_get(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "class_variable_get", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variable_get", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class_variable_get", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$constants(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "constants", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "constants", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("constants", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$public_instance_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "public_instance_methods", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public_instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$instance_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "instance_methods", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "instance_methods", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$attr(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "attr", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "attr", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("attr", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$private_instance_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "private_instance_methods", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private_instance_methods", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule","const_get","const_get");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variable_set","class_variable_set");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variables","class_variables");
        runtime.addBoundMethod("org.jruby.RubyModule","remove_class_variable","remove_class_variable");
        runtime.addBoundMethod("org.jruby.RubyModule","protected_instance_methods","protected_instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","const_defined_p","const_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variable_get","class_variable_get");
        runtime.addBoundMethod("org.jruby.RubyModule","constants","constants");
        runtime.addBoundMethod("org.jruby.RubyModule","public_instance_methods","public_instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","instance_methods","instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","attr","attr");
        runtime.addBoundMethod("org.jruby.RubyModule","private_instance_methods","private_instance_methods");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$const_get_1_9(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "const_get_1_9", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_get_1_9", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("const_get", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$protected_instance_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "protected_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "protected_instance_methods19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("protected_instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$class_variable_get19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "class_variable_get19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variable_get19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class_variable_get", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$const_defined_p19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "const_defined_p19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_defined_p19", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("const_defined?", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$constants19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "constants19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "constants19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("constants", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$attr19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "attr19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "attr19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("attr", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$2$0$class_variable_set19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "class_variable_set19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variable_set19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class_variable_set", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$class_variables19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "class_variables19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "class_variables19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("class_variables", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$private_constant(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_constant", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "private_constant", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("private_constant", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$1$0$remove_class_variable19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "remove_class_variable19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "remove_class_variable19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("remove_class_variable", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$0$name19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "name19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "name19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("name", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$public_instance_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "public_instance_methods19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public_instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$instance_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "instance_methods19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$private_instance_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "private_instance_methods19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private_instance_methods", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$public_constant(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_constant", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "public_constant", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("public_constant", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule","const_get_1_9","const_get");
        runtime.addBoundMethod("org.jruby.RubyModule","protected_instance_methods19","protected_instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variable_get19","class_variable_get");
        runtime.addBoundMethod("org.jruby.RubyModule","const_defined_p19","const_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule","constants19","constants");
        runtime.addBoundMethod("org.jruby.RubyModule","attr19","attr");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variable_set19","class_variable_set");
        runtime.addBoundMethod("org.jruby.RubyModule","class_variables19","class_variables");
        runtime.addBoundMethod("org.jruby.RubyModule","private_constant","private_constant");
        runtime.addBoundMethod("org.jruby.RubyModule","remove_class_variable19","remove_class_variable");
        runtime.addBoundMethod("org.jruby.RubyModule","name19","name");
        runtime.addBoundMethod("org.jruby.RubyModule","public_instance_methods19","public_instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","instance_methods19","instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","private_instance_methods19","private_instance_methods");
        runtime.addBoundMethod("org.jruby.RubyModule","public_constant","public_constant");
        }
        if (compatVersion.is2_0() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyModule$INVOKER$i$0$1$const_get_2_0(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "const_get_2_0", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "const_get_2_0", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("const_get", javaMethod);
        javaMethod = new org.jruby.RubyModule$INVOKER$i$mix(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "mix", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyModule.class, "mix", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("mix", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule","const_get_2_0","const_get");
        runtime.addBoundMethod("org.jruby.RubyModule","mix","mix");
        }
    }
    static {
        ASTInspector.addFrameAwareMethods("extended","attr","attr_accessor","private","define_method","attr_writer","module_function","protected","nesting","attr_reader","const_missing","public","initialize");
     }
}
