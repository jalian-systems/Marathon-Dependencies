/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyFileTest$FileTestFileMethods$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$writable_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "writable_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "writable_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("writable?", javaMethod);
        cls.addMethodAtBootTimeOnly("writable_real?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$chardev_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "chardev_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "chardev_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("chardev?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$size_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "size_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "size_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("size?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$grpowned_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "grpowned_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "grpowned_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("grpowned?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$symlink_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "symlink_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "symlink_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("symlink?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$owned_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "owned_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "owned_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("owned?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$readable_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "readable_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "readable_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("readable?", javaMethod);
        cls.addMethodAtBootTimeOnly("readable_real?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$exist_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "exist_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "exist_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("exist?", javaMethod);
        cls.addMethodAtBootTimeOnly("exists?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$setgid_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "setgid_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "setgid_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("setgid?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$zero_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "zero_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "zero_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$size(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "size", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "size", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$sticky_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "sticky_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "sticky_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("sticky?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$executable_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "executable_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "executable_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("executable?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$directory_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "directory_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "directory_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("directory?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$pipe_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "pipe_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "pipe_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("pipe?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$file_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "file_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "file_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("file?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$setuid_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "setuid_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "setuid_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("setuid?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$socket_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "socket_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "socket_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("socket?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$2$0$identical_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "identical_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "identical_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("identical?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$blockdev_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "blockdev_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "blockdev_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("blockdev?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$executable_real_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "executable_real_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "executable_real_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("executable_real?", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","writable_p","writable?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","chardev_p","chardev?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","size_p","size?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","grpowned_p","grpowned?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","symlink_p","symlink?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","owned_p","owned?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","readable_p","readable?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","exist_p","exist?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","setgid_p","setgid?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","zero_p","zero?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","size","size");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","sticky_p","sticky?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","executable_p","executable?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","directory_p","directory?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","pipe_p","pipe?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","file_p","file?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","setuid_p","setuid?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","socket_p","socket?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","identical_p","identical?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","blockdev_p","blockdev?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","executable_real_p","executable_real?");
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$worldWritable(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "worldWritable", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "worldWritable", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("world_writable?", javaMethod);
        javaMethod = new org.jruby.RubyFileTest$FileTestFileMethods$INVOKER$s$1$0$worldReadable(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "worldReadable", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFileTest.FileTestFileMethods.class, "worldReadable", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("world_readable?", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","worldWritable","world_writable?");
        runtime.addBoundMethod("org.jruby.RubyFileTest.FileTestFileMethods","worldReadable","world_readable?");
        }
    }
    static {
     }
}
