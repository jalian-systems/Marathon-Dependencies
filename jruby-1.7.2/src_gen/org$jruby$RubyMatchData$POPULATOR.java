/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyMatchData$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$pre_match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pre_match", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "pre_match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("pre_match", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$op_aref(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "op_aref", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$string(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "string", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "string", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("string", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$post_match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "post_match", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "post_match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("post_match", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$captures(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "captures", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "captures", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("captures", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$values_at(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "values_at", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "values_at", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("values_at", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$to_a(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "to_a", org.jruby.RubyArray.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$size(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "size", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyMatchData","pre_match","pre_match");
        runtime.addBoundMethod("org.jruby.RubyMatchData","op_aref","[]");
        runtime.addBoundMethod("org.jruby.RubyMatchData","string","string");
        runtime.addBoundMethod("org.jruby.RubyMatchData","post_match","post_match");
        runtime.addBoundMethod("org.jruby.RubyMatchData","captures","captures");
        runtime.addBoundMethod("org.jruby.RubyMatchData","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyMatchData","values_at","values_at");
        runtime.addBoundMethod("org.jruby.RubyMatchData","to_a","to_a");
        runtime.addBoundMethod("org.jruby.RubyMatchData","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyMatchData","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyMatchData","size","size");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$select(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "select", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "select", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$offset(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "offset", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "offset", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("offset", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$end(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "end", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "end", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("end", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$begin(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "begin", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "begin", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("begin", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyMatchData","select","select");
        runtime.addBoundMethod("org.jruby.RubyMatchData","offset","offset");
        runtime.addBoundMethod("org.jruby.RubyMatchData","end","end");
        runtime.addBoundMethod("org.jruby.RubyMatchData","begin","begin");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$op_aref19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aref19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "op_aref19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "hash", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$names(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "names", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "names", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("names", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$eql_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "eql_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$offset19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "offset19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "offset19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("offset", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$end19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "end19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "end19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("end", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$0$0$regexp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "regexp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "regexp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("regexp", javaMethod);
        javaMethod = new org.jruby.RubyMatchData$INVOKER$i$1$0$begin19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "begin19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyMatchData.class, "begin19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("begin", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyMatchData","op_aref19","[]");
        runtime.addBoundMethod("org.jruby.RubyMatchData","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyMatchData","names","names");
        runtime.addBoundMethod("org.jruby.RubyMatchData","eql_p","eql?");
        runtime.addBoundMethod("org.jruby.RubyMatchData","offset19","offset");
        runtime.addBoundMethod("org.jruby.RubyMatchData","end19","end");
        runtime.addBoundMethod("org.jruby.RubyMatchData","regexp","regexp");
        runtime.addBoundMethod("org.jruby.RubyMatchData","begin19","begin");
        }
    }
    static {
     }
}
