/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyComplex$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyComplex$INVOKER$s$2$0$polar(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "polar", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "polar", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("polar", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$s$newInstanceBang(singletonClass, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "newInstanceBang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "newInstanceBang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("new!", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$s$convert(singletonClass, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "convert", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "convert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("convert", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$s$newInstance(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "newInstance", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("rect", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("rectangular", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex","polar","polar");
        runtime.addBoundMethod("org.jruby.RubyComplex","newInstanceBang","new!");
        runtime.addBoundMethod("org.jruby.RubyComplex","convert","convert");
        runtime.addBoundMethod("org.jruby.RubyComplex","newInstance","rect");
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyComplex$INVOKER$s$0$1$polar19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "polar19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "polar19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        singletonClass.addMethodAtBootTimeOnly("polar", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex","polar19","polar");
        }
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$rect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "rect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rectangular", javaMethod);
        cls.addMethodAtBootTimeOnly("rect", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$to_f(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "to_f", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$to_i(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_i", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "to_i", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$image(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "image", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "image", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("imaginary", javaMethod);
        cls.addMethodAtBootTimeOnly("imag", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$to_r(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "to_r", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_r", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$marshal_load(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "marshal_load", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "marshal_load", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("marshal_load", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$real(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "real", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "real", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("real", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$arg(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "arg", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "arg", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("arg", javaMethod);
        cls.addMethodAtBootTimeOnly("angle", javaMethod);
        cls.addMethodAtBootTimeOnly("phase", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$abs(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "abs", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        cls.addMethodAtBootTimeOnly("magnitude", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_expt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_expt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_expt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$fdiv(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "fdiv", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "fdiv", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("fdiv", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$polar(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "polar", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "polar", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("polar", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$negate(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "negate", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "negate", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$coerce(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "coerce", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "coerce", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "hash", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_mul(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_mul", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_add(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_add", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_add", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$demoninator(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "demoninator", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "demoninator", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("denominator", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$numerator(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "numerator", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "numerator", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("numerator", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$conjugate(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "conjugate", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "conjugate", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("conjugate", javaMethod);
        cls.addMethodAtBootTimeOnly("conj", javaMethod);
        cls.addMethodAtBootTimeOnly("~", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_div(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_div", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_div", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        cls.addMethodAtBootTimeOnly("quo", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$op_sub(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_sub", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "op_sub", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$real_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "real_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "real_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("real?", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$marshal_dump(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "marshal_dump", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "marshal_dump", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("marshal_dump", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$1$0$eql_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "eql_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$0$abs2(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "abs2", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "abs2", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("abs2", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex","rect","rectangular");
        runtime.addBoundMethod("org.jruby.RubyComplex","to_f","to_f");
        runtime.addBoundMethod("org.jruby.RubyComplex","to_i","to_i");
        runtime.addBoundMethod("org.jruby.RubyComplex","image","imaginary");
        runtime.addBoundMethod("org.jruby.RubyComplex","to_r","to_r");
        runtime.addBoundMethod("org.jruby.RubyComplex","marshal_load","marshal_load");
        runtime.addBoundMethod("org.jruby.RubyComplex","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyComplex","real","real");
        runtime.addBoundMethod("org.jruby.RubyComplex","arg","arg");
        runtime.addBoundMethod("org.jruby.RubyComplex","abs","abs");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_expt","**");
        runtime.addBoundMethod("org.jruby.RubyComplex","fdiv","fdiv");
        runtime.addBoundMethod("org.jruby.RubyComplex","polar","polar");
        runtime.addBoundMethod("org.jruby.RubyComplex","negate","-@");
        runtime.addBoundMethod("org.jruby.RubyComplex","coerce","coerce");
        runtime.addBoundMethod("org.jruby.RubyComplex","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_mul","*");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_add","+");
        runtime.addBoundMethod("org.jruby.RubyComplex","demoninator","denominator");
        runtime.addBoundMethod("org.jruby.RubyComplex","numerator","numerator");
        runtime.addBoundMethod("org.jruby.RubyComplex","conjugate","conjugate");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_div","/");
        runtime.addBoundMethod("org.jruby.RubyComplex","op_sub","-");
        runtime.addBoundMethod("org.jruby.RubyComplex","real_p","real?");
        runtime.addBoundMethod("org.jruby.RubyComplex","marshal_dump","marshal_dump");
        runtime.addBoundMethod("org.jruby.RubyComplex","eql_p","eql?");
        runtime.addBoundMethod("org.jruby.RubyComplex","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyComplex","abs2","abs2");
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyComplex$INVOKER$i$0$1$rationalize(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rationalize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyComplex.class, "rationalize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("rationalize", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex","rationalize","rationalize");
        }
    }
    static {
     }
}
