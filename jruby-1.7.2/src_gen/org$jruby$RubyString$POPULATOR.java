/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyString$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyString$INVOKER$s$1$0$try_convert(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "try_convert", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "try_convert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyString","try_convert","try_convert");
        }
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$unpack(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "unpack", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "unpack", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("unpack", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$rpartition(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "rpartition", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rpartition", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rpartition", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$empty_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "empty_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("empty?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "hash", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$bytesize(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "bytesize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "bytesize", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("bytesize", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_format(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_format", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_format", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("%", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$sum(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sum", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "sum", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("sum", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$crypt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "crypt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "crypt", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("crypt", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        cls.addMethodAtBootTimeOnly("to_str", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$bytes(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "bytes", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "bytes", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$end_with_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "end_with_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "end_with_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("end_with?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$each_byte19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_byte19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_byte19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$start_with_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "start_with_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "start_with_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("start_with?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$partition(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "partition", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "partition", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("partition", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyString","unpack","unpack");
        runtime.addBoundMethod("org.jruby.RubyString","rpartition","rpartition");
        runtime.addBoundMethod("org.jruby.RubyString","empty_p","empty?");
        runtime.addBoundMethod("org.jruby.RubyString","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyString","bytesize","bytesize");
        runtime.addBoundMethod("org.jruby.RubyString","op_format","%");
        runtime.addBoundMethod("org.jruby.RubyString","sum","sum");
        runtime.addBoundMethod("org.jruby.RubyString","tr_bang19","tr!");
        runtime.addBoundMethod("org.jruby.RubyString","crypt","crypt");
        runtime.addBoundMethod("org.jruby.RubyString","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyString","bytes","bytes");
        runtime.addBoundMethod("org.jruby.RubyString","end_with_p","end_with?");
        runtime.addBoundMethod("org.jruby.RubyString","each_byte19","each_byte");
        runtime.addBoundMethod("org.jruby.RubyString","start_with_p","start_with?");
        runtime.addBoundMethod("org.jruby.RubyString","partition","partition");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyString$INVOKER$i$center(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "center", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "center", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("center", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$count(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "count", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "count", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("count", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$downcase_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "downcase_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "downcase_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("downcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$succ_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "succ_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "succ_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("succ!", javaMethod);
        cls.addMethodAtBootTimeOnly("next!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$swapcase_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "swapcase_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "swapcase_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("swapcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "match", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("match", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_cmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_match", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("=~", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$each_char18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_char18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_char18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$squeeze(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "squeeze", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "squeeze", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("squeeze", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$rjust(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rjust", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rjust", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rjust", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$hex(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hex", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "hex", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("hex", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$include_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "include_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "include_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$rindex(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rindex", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rindex", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rindex", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$downcase(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "downcase", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "downcase", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("downcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$delete_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "delete_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "delete_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("delete!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$succ(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "succ", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "succ", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("succ", javaMethod);
        cls.addMethodAtBootTimeOnly("next", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$index(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "index", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "index", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("index", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_mul(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_mul", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_plus(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_plus", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$capitalize(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "capitalize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "capitalize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("capitalize", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$strip(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "strip", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "strip", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("strip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$lstrip(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lstrip", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lstrip", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("lstrip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$ljust(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "ljust", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "ljust", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("ljust", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$upcase(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "upcase", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upcase", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("upcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$oct(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "oct", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "oct", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("oct", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$slice_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "slice_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "slice_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("slice!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$lines18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "lines18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lines18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("lines", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$split(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "split", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "split", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("split", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$each18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "each18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chop(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chop", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chop", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_gt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_gt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_lt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_lt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$sub_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sub_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "sub_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$op_aref(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_aref", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        cls.addMethodAtBootTimeOnly("slice", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$to_f(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_f", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$dump(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "dump", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "dump", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("dump", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$gsub(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gsub", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "gsub", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$to_i(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "to_i", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_i", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$gsub_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gsub_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "gsub_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_ge(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_ge", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$rstrip(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rstrip", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rstrip", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rstrip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$swapcase(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "swapcase", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "swapcase", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("swapcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$upcase_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "upcase_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upcase_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("upcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$delete(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "delete", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "delete", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("delete", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$length(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "length", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "length", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$scan(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "scan", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "scan", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("scan", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$rstrip_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rstrip_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rstrip_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rstrip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_s_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_s_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_s_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr_s!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$capitalize_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "capitalize_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "capitalize_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("capitalize!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$sub(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sub", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "sub", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$op_aset(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aset", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_aset", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$each_line18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "each_line18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_line18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$reverse(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "reverse", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("reverse", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$intern(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "intern", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "intern", org.jruby.RubySymbol.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
        cls.addMethodAtBootTimeOnly("intern", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$chomp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "chomp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chomp", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chomp", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$upto18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "upto18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upto18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("upto", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr_s", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$reverse_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "reverse_bang", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("reverse!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$casecmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "casecmp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "casecmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("casecmp", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$concat(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "concat", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "concat", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("concat", javaMethod);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$strip_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "strip_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "strip_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("strip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$replace(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "replace", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "replace", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("replace", javaMethod);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$squeeze_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "squeeze_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "squeeze_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("squeeze!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$lstrip_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lstrip_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lstrip_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("lstrip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$chomp_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "chomp_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chomp_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chomp!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_le(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_le", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chars18(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chars18", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chars18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$str_eql_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "str_eql_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "str_eql_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$insert(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "insert", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "insert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("insert", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chop_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chop_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chop_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chop!", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyString","center","center");
        runtime.addBoundMethod("org.jruby.RubyString","count","count");
        runtime.addBoundMethod("org.jruby.RubyString","downcase_bang","downcase!");
        runtime.addBoundMethod("org.jruby.RubyString","tr","tr");
        runtime.addBoundMethod("org.jruby.RubyString","succ_bang","succ!");
        runtime.addBoundMethod("org.jruby.RubyString","swapcase_bang","swapcase!");
        runtime.addBoundMethod("org.jruby.RubyString","match","match");
        runtime.addBoundMethod("org.jruby.RubyString","op_cmp","<=>");
        runtime.addBoundMethod("org.jruby.RubyString","op_match","=~");
        runtime.addBoundMethod("org.jruby.RubyString","each_char18","each_char");
        runtime.addBoundMethod("org.jruby.RubyString","squeeze","squeeze");
        runtime.addBoundMethod("org.jruby.RubyString","rjust","rjust");
        runtime.addBoundMethod("org.jruby.RubyString","hex","hex");
        runtime.addBoundMethod("org.jruby.RubyString","include_p","include?");
        runtime.addBoundMethod("org.jruby.RubyString","rindex","rindex");
        runtime.addBoundMethod("org.jruby.RubyString","downcase","downcase");
        runtime.addBoundMethod("org.jruby.RubyString","delete_bang","delete!");
        runtime.addBoundMethod("org.jruby.RubyString","succ","succ");
        runtime.addBoundMethod("org.jruby.RubyString","index","index");
        runtime.addBoundMethod("org.jruby.RubyString","op_mul","*");
        runtime.addBoundMethod("org.jruby.RubyString","op_plus","+");
        runtime.addBoundMethod("org.jruby.RubyString","capitalize","capitalize");
        runtime.addBoundMethod("org.jruby.RubyString","strip","strip");
        runtime.addBoundMethod("org.jruby.RubyString","lstrip","lstrip");
        runtime.addBoundMethod("org.jruby.RubyString","ljust","ljust");
        runtime.addBoundMethod("org.jruby.RubyString","upcase","upcase");
        runtime.addBoundMethod("org.jruby.RubyString","oct","oct");
        runtime.addBoundMethod("org.jruby.RubyString","slice_bang","slice!");
        runtime.addBoundMethod("org.jruby.RubyString","lines18","lines");
        runtime.addBoundMethod("org.jruby.RubyString","split","split");
        runtime.addBoundMethod("org.jruby.RubyString","each18","each");
        runtime.addBoundMethod("org.jruby.RubyString","chop","chop");
        runtime.addBoundMethod("org.jruby.RubyString","op_gt",">");
        runtime.addBoundMethod("org.jruby.RubyString","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyString","op_lt","<");
        runtime.addBoundMethod("org.jruby.RubyString","sub_bang","sub!");
        runtime.addBoundMethod("org.jruby.RubyString","initialize","initialize");
        runtime.addBoundMethod("org.jruby.RubyString","op_aref","[]");
        runtime.addBoundMethod("org.jruby.RubyString","to_f","to_f");
        runtime.addBoundMethod("org.jruby.RubyString","dump","dump");
        runtime.addBoundMethod("org.jruby.RubyString","gsub","gsub");
        runtime.addBoundMethod("org.jruby.RubyString","to_i","to_i");
        runtime.addBoundMethod("org.jruby.RubyString","gsub_bang","gsub!");
        runtime.addBoundMethod("org.jruby.RubyString","op_ge",">=");
        runtime.addBoundMethod("org.jruby.RubyString","rstrip","rstrip");
        runtime.addBoundMethod("org.jruby.RubyString","swapcase","swapcase");
        runtime.addBoundMethod("org.jruby.RubyString","upcase_bang","upcase!");
        runtime.addBoundMethod("org.jruby.RubyString","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyString","delete","delete");
        runtime.addBoundMethod("org.jruby.RubyString","length","length");
        runtime.addBoundMethod("org.jruby.RubyString","scan","scan");
        runtime.addBoundMethod("org.jruby.RubyString","rstrip_bang","rstrip!");
        runtime.addBoundMethod("org.jruby.RubyString","tr_s_bang","tr_s!");
        runtime.addBoundMethod("org.jruby.RubyString","capitalize_bang","capitalize!");
        runtime.addBoundMethod("org.jruby.RubyString","sub","sub");
        runtime.addBoundMethod("org.jruby.RubyString","op_aset","[]=");
        runtime.addBoundMethod("org.jruby.RubyString","each_line18","each_line");
        runtime.addBoundMethod("org.jruby.RubyString","reverse","reverse");
        runtime.addBoundMethod("org.jruby.RubyString","intern","to_sym");
        runtime.addBoundMethod("org.jruby.RubyString","chomp","chomp");
        runtime.addBoundMethod("org.jruby.RubyString","tr_bang","tr!");
        runtime.addBoundMethod("org.jruby.RubyString","upto18","upto");
        runtime.addBoundMethod("org.jruby.RubyString","tr_s","tr_s");
        runtime.addBoundMethod("org.jruby.RubyString","reverse_bang","reverse!");
        runtime.addBoundMethod("org.jruby.RubyString","casecmp","casecmp");
        runtime.addBoundMethod("org.jruby.RubyString","concat","concat");
        runtime.addBoundMethod("org.jruby.RubyString","strip_bang","strip!");
        runtime.addBoundMethod("org.jruby.RubyString","replace","replace");
        runtime.addBoundMethod("org.jruby.RubyString","squeeze_bang","squeeze!");
        runtime.addBoundMethod("org.jruby.RubyString","lstrip_bang","lstrip!");
        runtime.addBoundMethod("org.jruby.RubyString","chomp_bang","chomp!");
        runtime.addBoundMethod("org.jruby.RubyString","op_le","<=");
        runtime.addBoundMethod("org.jruby.RubyString","chars18","chars");
        runtime.addBoundMethod("org.jruby.RubyString","str_eql_p","eql?");
        runtime.addBoundMethod("org.jruby.RubyString","insert","insert");
        runtime.addBoundMethod("org.jruby.RubyString","chop_bang","chop!");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyString$INVOKER$i$count19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "count19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "count19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("count", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$downcase_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "downcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "downcase_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("downcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$succ_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "succ_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "succ_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("succ!", javaMethod);
        cls.addMethodAtBootTimeOnly("next!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$swapcase_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "swapcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "swapcase_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("swapcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$force_encoding(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "force_encoding", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "force_encoding", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("force_encoding", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$codepoints(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "codepoints", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "codepoints", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("codepoints", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_cmp19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_cmp19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$center19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "center19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "center19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("center", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_match19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_match19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_match19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("=~", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$each_char19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_char19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_char19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$squeeze19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "squeeze19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "squeeze19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("squeeze", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$rjust19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rjust19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rjust19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rjust", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$hex19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hex19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "hex19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("hex", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$include_p19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "include_p19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "include_p19", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$encode_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "encode_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "encode_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("encode!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$rindex19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rindex19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rindex19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rindex", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$downcase19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "downcase19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "downcase19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("downcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$initialize19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "initialize19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$delete_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "delete_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "delete_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("delete!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$encode(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "encode", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "encode", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("encode", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$succ19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "succ19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "succ19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("succ", javaMethod);
        cls.addMethodAtBootTimeOnly("next", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$index19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "index19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "index19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("index", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$valid_encoding_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "valid_encoding_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "valid_encoding_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("valid_encoding?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$each_codepoint(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_codepoint", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_codepoint", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_codepoint", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_mul19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mul19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_mul19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_plus19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_plus19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_plus19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$capitalize19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "capitalize19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "capitalize19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("capitalize", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$strip19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "strip19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "strip19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("strip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$lstrip19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lstrip19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lstrip19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("lstrip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$ljust19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "ljust19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "ljust19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("ljust", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$upcase19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "upcase19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upcase19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("upcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$oct19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "oct19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "oct19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("oct", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$slice_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "slice_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "slice_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("slice!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$split19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "split19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "split19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("split", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$match19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "match19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "match19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("match", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chop19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chop19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chop19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chop", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_gt19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_gt19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_gt19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$inspect19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "inspect19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_lt19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_lt19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_lt19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$sub_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sub_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "sub_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chr(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chr", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chr", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chr", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$to_f19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_f19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_f19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$sub19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sub19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "sub19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$op_aref19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aref19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_aref19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        cls.addMethodAtBootTimeOnly("slice", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$dump19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "dump19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "dump19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("dump", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$getbyte(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "getbyte", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "getbyte", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$to_i19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "to_i19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_i19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$gsub_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gsub_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "gsub_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$ord(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "ord", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "ord", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("ord", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_ge19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_ge19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_ge19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$rstrip19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rstrip19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rstrip19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rstrip", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$casecmp19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "casecmp19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "casecmp19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("casecmp", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$to_r(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_r", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_r", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$clear(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "clear", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "clear", org.jruby.RubyString.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$ascii_only_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "ascii_only_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "ascii_only_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("ascii_only?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$swapcase19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "swapcase19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "swapcase19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("swapcase", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$byteslice(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "byteslice", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "byteslice", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("byteslice", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$upcase_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "upcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upcase_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("upcase!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_equal19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_equal19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$lines(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "lines", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lines", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("lines", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$encoding(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "encoding", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "encoding", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("encoding", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$delete19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "delete19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "delete19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("delete", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$length19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "length19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "length19", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$rstrip_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rstrip_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "rstrip_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rstrip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_s_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_s_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_s_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr_s!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$capitalize_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "capitalize_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "capitalize_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("capitalize!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$op_aset19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "op_aset19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_aset19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$each_line19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "each_line19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "each_line19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$reverse19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "reverse19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("reverse", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$gsub19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gsub19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "gsub19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$intern19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "intern19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "intern19", org.jruby.RubySymbol.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
        cls.addMethodAtBootTimeOnly("intern", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$setbyte(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "setbyte", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "setbyte", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("setbyte", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$prepend(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "prepend", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "prepend", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("prepend", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$chomp19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "chomp19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chomp19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chomp", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$upto19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "upto19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "upto19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("upto", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$tr_s19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "tr_s19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "tr_s19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tr_s", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$reverse_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "reverse_bang19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("reverse!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$concat19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "concat19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "concat19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("concat", javaMethod);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$strip_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "strip_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "strip_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("strip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$replace19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "replace19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "replace19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("replace", javaMethod);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$squeeze_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "squeeze_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "squeeze_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("squeeze!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$lstrip_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lstrip_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "lstrip_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("lstrip!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$chomp_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "chomp_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chomp_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chomp!", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$op_le19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_le19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "op_le19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chars19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chars19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chars19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$scan19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "scan19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "scan19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("scan", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$to_c(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_c", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "to_c", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_c", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$1$0$str_eql_p19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "str_eql_p19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "str_eql_p19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$2$0$insert19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "insert19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "insert19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("insert", javaMethod);
        javaMethod = new org.jruby.RubyString$INVOKER$i$0$0$chop_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chop_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyString.class, "chop_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("chop!", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyString","count19","count");
        runtime.addBoundMethod("org.jruby.RubyString","downcase_bang19","downcase!");
        runtime.addBoundMethod("org.jruby.RubyString","tr19","tr");
        runtime.addBoundMethod("org.jruby.RubyString","succ_bang19","succ!");
        runtime.addBoundMethod("org.jruby.RubyString","swapcase_bang19","swapcase!");
        runtime.addBoundMethod("org.jruby.RubyString","force_encoding","force_encoding");
        runtime.addBoundMethod("org.jruby.RubyString","codepoints","codepoints");
        runtime.addBoundMethod("org.jruby.RubyString","op_cmp19","<=>");
        runtime.addBoundMethod("org.jruby.RubyString","center19","center");
        runtime.addBoundMethod("org.jruby.RubyString","op_match19","=~");
        runtime.addBoundMethod("org.jruby.RubyString","each_char19","each_char");
        runtime.addBoundMethod("org.jruby.RubyString","squeeze19","squeeze");
        runtime.addBoundMethod("org.jruby.RubyString","rjust19","rjust");
        runtime.addBoundMethod("org.jruby.RubyString","hex19","hex");
        runtime.addBoundMethod("org.jruby.RubyString","include_p19","include?");
        runtime.addBoundMethod("org.jruby.RubyString","encode_bang","encode!");
        runtime.addBoundMethod("org.jruby.RubyString","rindex19","rindex");
        runtime.addBoundMethod("org.jruby.RubyString","downcase19","downcase");
        runtime.addBoundMethod("org.jruby.RubyString","initialize19","initialize");
        runtime.addBoundMethod("org.jruby.RubyString","delete_bang19","delete!");
        runtime.addBoundMethod("org.jruby.RubyString","encode","encode");
        runtime.addBoundMethod("org.jruby.RubyString","succ19","succ");
        runtime.addBoundMethod("org.jruby.RubyString","index19","index");
        runtime.addBoundMethod("org.jruby.RubyString","valid_encoding_p","valid_encoding?");
        runtime.addBoundMethod("org.jruby.RubyString","each_codepoint","each_codepoint");
        runtime.addBoundMethod("org.jruby.RubyString","op_mul19","*");
        runtime.addBoundMethod("org.jruby.RubyString","op_plus19","+");
        runtime.addBoundMethod("org.jruby.RubyString","capitalize19","capitalize");
        runtime.addBoundMethod("org.jruby.RubyString","strip19","strip");
        runtime.addBoundMethod("org.jruby.RubyString","lstrip19","lstrip");
        runtime.addBoundMethod("org.jruby.RubyString","ljust19","ljust");
        runtime.addBoundMethod("org.jruby.RubyString","upcase19","upcase");
        runtime.addBoundMethod("org.jruby.RubyString","oct19","oct");
        runtime.addBoundMethod("org.jruby.RubyString","slice_bang19","slice!");
        runtime.addBoundMethod("org.jruby.RubyString","split19","split");
        runtime.addBoundMethod("org.jruby.RubyString","match19","match");
        runtime.addBoundMethod("org.jruby.RubyString","chop19","chop");
        runtime.addBoundMethod("org.jruby.RubyString","op_gt19",">");
        runtime.addBoundMethod("org.jruby.RubyString","inspect19","inspect");
        runtime.addBoundMethod("org.jruby.RubyString","op_lt19","<");
        runtime.addBoundMethod("org.jruby.RubyString","sub_bang19","sub!");
        runtime.addBoundMethod("org.jruby.RubyString","chr","chr");
        runtime.addBoundMethod("org.jruby.RubyString","to_f19","to_f");
        runtime.addBoundMethod("org.jruby.RubyString","sub19","sub");
        runtime.addBoundMethod("org.jruby.RubyString","op_aref19","[]");
        runtime.addBoundMethod("org.jruby.RubyString","dump19","dump");
        runtime.addBoundMethod("org.jruby.RubyString","getbyte","getbyte");
        runtime.addBoundMethod("org.jruby.RubyString","to_i19","to_i");
        runtime.addBoundMethod("org.jruby.RubyString","gsub_bang19","gsub!");
        runtime.addBoundMethod("org.jruby.RubyString","ord","ord");
        runtime.addBoundMethod("org.jruby.RubyString","op_ge19",">=");
        runtime.addBoundMethod("org.jruby.RubyString","rstrip19","rstrip");
        runtime.addBoundMethod("org.jruby.RubyString","casecmp19","casecmp");
        runtime.addBoundMethod("org.jruby.RubyString","to_r","to_r");
        runtime.addBoundMethod("org.jruby.RubyString","clear","clear");
        runtime.addBoundMethod("org.jruby.RubyString","ascii_only_p","ascii_only?");
        runtime.addBoundMethod("org.jruby.RubyString","swapcase19","swapcase");
        runtime.addBoundMethod("org.jruby.RubyString","byteslice","byteslice");
        runtime.addBoundMethod("org.jruby.RubyString","upcase_bang19","upcase!");
        runtime.addBoundMethod("org.jruby.RubyString","op_equal19","==");
        runtime.addBoundMethod("org.jruby.RubyString","lines","lines");
        runtime.addBoundMethod("org.jruby.RubyString","encoding","encoding");
        runtime.addBoundMethod("org.jruby.RubyString","delete19","delete");
        runtime.addBoundMethod("org.jruby.RubyString","length19","length");
        runtime.addBoundMethod("org.jruby.RubyString","rstrip_bang19","rstrip!");
        runtime.addBoundMethod("org.jruby.RubyString","tr_s_bang19","tr_s!");
        runtime.addBoundMethod("org.jruby.RubyString","capitalize_bang19","capitalize!");
        runtime.addBoundMethod("org.jruby.RubyString","op_aset19","[]=");
        runtime.addBoundMethod("org.jruby.RubyString","each_line19","each_line");
        runtime.addBoundMethod("org.jruby.RubyString","reverse19","reverse");
        runtime.addBoundMethod("org.jruby.RubyString","gsub19","gsub");
        runtime.addBoundMethod("org.jruby.RubyString","intern19","to_sym");
        runtime.addBoundMethod("org.jruby.RubyString","setbyte","setbyte");
        runtime.addBoundMethod("org.jruby.RubyString","prepend","prepend");
        runtime.addBoundMethod("org.jruby.RubyString","chomp19","chomp");
        runtime.addBoundMethod("org.jruby.RubyString","upto19","upto");
        runtime.addBoundMethod("org.jruby.RubyString","tr_s19","tr_s");
        runtime.addBoundMethod("org.jruby.RubyString","reverse_bang19","reverse!");
        runtime.addBoundMethod("org.jruby.RubyString","concat19","concat");
        runtime.addBoundMethod("org.jruby.RubyString","strip_bang19","strip!");
        runtime.addBoundMethod("org.jruby.RubyString","replace19","replace");
        runtime.addBoundMethod("org.jruby.RubyString","squeeze_bang19","squeeze!");
        runtime.addBoundMethod("org.jruby.RubyString","lstrip_bang19","lstrip!");
        runtime.addBoundMethod("org.jruby.RubyString","chomp_bang19","chomp!");
        runtime.addBoundMethod("org.jruby.RubyString","op_le19","<=");
        runtime.addBoundMethod("org.jruby.RubyString","chars19","chars");
        runtime.addBoundMethod("org.jruby.RubyString","scan19","scan");
        runtime.addBoundMethod("org.jruby.RubyString","to_c","to_c");
        runtime.addBoundMethod("org.jruby.RubyString","str_eql_p19","eql?");
        runtime.addBoundMethod("org.jruby.RubyString","insert19","insert");
        runtime.addBoundMethod("org.jruby.RubyString","chop_bang19","chop!");
        }
    }
    static {
        ASTInspector.addScopeAwareMethods("rpartition","sub","gsub","index","[]","gsub!","=~","slice!","rindex","scan","slice","split","match","sub!","[]=");
     }
}
