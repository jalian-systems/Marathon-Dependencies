/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$ext$ffi$Struct$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$allocateInOut(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "allocateInOut", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "allocateInOut", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("new_inout", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("alloc_inout", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$0$0$alignment(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "alignment", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "alignment", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("alignment", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("align", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$0$0$offsets(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "offsets", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "offsets", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("offsets", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$allocateOut(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "allocateOut", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "allocateOut", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("new_out", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("alloc_out", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$1$0$offset_of(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "offset_of", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "offset_of", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("offset_of", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$1$0$set_layout(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "set_layout", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "set_layout", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("layout=", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$allocateIn(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "allocateIn", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "allocateIn", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("new_in", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("alloc_in", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$0$0$members(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "members", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "members", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("members", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$s$0$0$size(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "size", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "size", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("size", javaMethod);
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","allocateInOut","new_inout");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","alignment","alignment");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","offsets","offsets");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","allocateOut","new_out");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","offset_of","offset_of");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","set_layout","layout=");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","allocateIn","new_in");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","members","members");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","size","size");
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$alignment(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "alignment", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "alignment", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("alignment", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$1$0$getFieldValue(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "getFieldValue", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "getFieldValue", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$offsets(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "offsets", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "offsets", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("offsets", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$1$0$initialize_copy(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$size(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "size", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$clear(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "clear", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "clear", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$values(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "values", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "values", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("values", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$order(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "order", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "order", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("order", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$null_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "null_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "null_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("null?", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$getLayout(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "getLayout", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "getLayout", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("cspec", javaMethod);
        cls.addMethodAtBootTimeOnly("layout", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$pointer(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pointer", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "pointer", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("pointer", javaMethod);
        cls.addMethodAtBootTimeOnly("to_ptr", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$1$0$offset_of(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "offset_of", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "offset_of", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("offset_of", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$0$0$members(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "members", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "members", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("members", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.ext.ffi.Struct$INVOKER$i$2$0$setFieldValue(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "setFieldValue", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.ffi.Struct.class, "setFieldValue", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","alignment","alignment");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","getFieldValue","[]");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","offsets","offsets");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","size","size");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","clear","clear");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","values","values");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","order","order");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","null_p","null?");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","getLayout","cspec");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","pointer","pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","offset_of","offset_of");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","members","members");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","initialize","initialize");
        runtime.addBoundMethod("org.jruby.ext.ffi.Struct","setFieldValue","[]=");
    }
    static {
     }
}
