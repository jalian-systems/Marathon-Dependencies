/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyArray$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyArray$INVOKER$s$0$0$create(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "create", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "create", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("[]", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArray","create","[]");
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyArray$INVOKER$s$1$0$try_convert(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "try_convert", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "try_convert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArray","try_convert","try_convert");
        }
        javaMethod = new org.jruby.RubyArray$INVOKER$i$last(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "last", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "last", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("last", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$count(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "count", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "count", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("count", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$reject_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reject_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "reject_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("reject!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$pop(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "pop", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "pop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("pop", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_cmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$to_ary(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_ary", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "to_ary", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_ary", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$frozen_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "frozen_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "frozen_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("frozen?", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$include_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "include_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "include_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$fetch(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "fetch", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "fetch", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("fetch", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$rassoc(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "rassoc", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "rassoc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("rassoc", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$cycle(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "cycle", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "cycle", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("cycle", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$index(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "index", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "index", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("index", javaMethod);
        cls.addMethodAtBootTimeOnly("find_index", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$assoc(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "assoc", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "assoc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("assoc", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$empty_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "empty_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("empty?", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_and(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_and", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_and", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("&", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$each_index(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_index", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "each_index", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_index", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$indexes(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "indexes", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "indexes", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("indexes", javaMethod);
        cls.addMethodAtBootTimeOnly("indices", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_plus(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_plus", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$map_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "map_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "map_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("map!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_diff(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_diff", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_diff", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$each_slice(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "each_slice", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "each_slice", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_slice", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$each(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "each", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$slice_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "slice_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "slice_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("slice!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$combination(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "combination", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "combination", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("combination", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$permutation(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "permutation", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "permutation", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("permutation", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$fill(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "fill", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "fill", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("fill", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$delete(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "delete", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "delete", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("delete", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$nitems(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "nitems", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "nitems", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("nitems", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$transpose(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "transpose", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "transpose", org.jruby.RubyArray.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("transpose", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$delete_at(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "delete_at", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "delete_at", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("delete_at", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$collect_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "collect_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "collect_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("collect!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$reverse_each(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse_each", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "reverse_each", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("reverse_each", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$values_at(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "values_at", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "values_at", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("values_at", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$compact_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "compact_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "compact_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("compact!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$rb_clear(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rb_clear", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "rb_clear", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$1$zip(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "zip", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "zip", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("zip", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$length(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "length", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "length", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        cls.defineAlias("size", "length");
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$insert(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "insert", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "insert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("insert", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$delete_if(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "delete_if", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "delete_if", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("delete_if", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$reverse(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "reverse", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("reverse", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$at(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "at", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "at", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("at", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$initialize_copy(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$reverse_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reverse_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "reverse_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("reverse!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$replace(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "replace", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "replace", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("replace", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$reject(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "reject", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "reject", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("reject", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$append(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "append", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "append", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$select(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "select", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "select", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_or(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_or", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_or", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("|", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$eql(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "eql", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "eql", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$first(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "first", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "first", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("first", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$to_a(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "to_a", org.jruby.RubyArray.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$shift(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "shift", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "shift", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("shift", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$rindex(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rindex", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "rindex", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("rindex", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArray","last","last");
        runtime.addBoundMethod("org.jruby.RubyArray","count","count");
        runtime.addBoundMethod("org.jruby.RubyArray","reject_bang","reject!");
        runtime.addBoundMethod("org.jruby.RubyArray","pop","pop");
        runtime.addBoundMethod("org.jruby.RubyArray","op_cmp","<=>");
        runtime.addBoundMethod("org.jruby.RubyArray","to_ary","to_ary");
        runtime.addBoundMethod("org.jruby.RubyArray","frozen_p","frozen?");
        runtime.addBoundMethod("org.jruby.RubyArray","include_p","include?");
        runtime.addBoundMethod("org.jruby.RubyArray","fetch","fetch");
        runtime.addBoundMethod("org.jruby.RubyArray","rassoc","rassoc");
        runtime.addBoundMethod("org.jruby.RubyArray","cycle","cycle");
        runtime.addBoundMethod("org.jruby.RubyArray","index","index");
        runtime.addBoundMethod("org.jruby.RubyArray","assoc","assoc");
        runtime.addBoundMethod("org.jruby.RubyArray","empty_p","empty?");
        runtime.addBoundMethod("org.jruby.RubyArray","op_and","&");
        runtime.addBoundMethod("org.jruby.RubyArray","each_index","each_index");
        runtime.addBoundMethod("org.jruby.RubyArray","indexes","indexes");
        runtime.addBoundMethod("org.jruby.RubyArray","op_plus","+");
        runtime.addBoundMethod("org.jruby.RubyArray","map_bang","map!");
        runtime.addBoundMethod("org.jruby.RubyArray","op_diff","-");
        runtime.addBoundMethod("org.jruby.RubyArray","each_slice","each_slice");
        runtime.addBoundMethod("org.jruby.RubyArray","each","each");
        runtime.addBoundMethod("org.jruby.RubyArray","slice_bang","slice!");
        runtime.addBoundMethod("org.jruby.RubyArray","combination","combination");
        runtime.addBoundMethod("org.jruby.RubyArray","permutation","permutation");
        runtime.addBoundMethod("org.jruby.RubyArray","fill","fill");
        runtime.addBoundMethod("org.jruby.RubyArray","delete","delete");
        runtime.addBoundMethod("org.jruby.RubyArray","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyArray","nitems","nitems");
        runtime.addBoundMethod("org.jruby.RubyArray","initialize","initialize");
        runtime.addBoundMethod("org.jruby.RubyArray","transpose","transpose");
        runtime.addBoundMethod("org.jruby.RubyArray","delete_at","delete_at");
        runtime.addBoundMethod("org.jruby.RubyArray","collect_bang","collect!");
        runtime.addBoundMethod("org.jruby.RubyArray","reverse_each","reverse_each");
        runtime.addBoundMethod("org.jruby.RubyArray","values_at","values_at");
        runtime.addBoundMethod("org.jruby.RubyArray","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyArray","compact_bang","compact!");
        runtime.addBoundMethod("org.jruby.RubyArray","rb_clear","clear");
        runtime.addBoundMethod("org.jruby.RubyArray","zip","zip");
        runtime.addBoundMethod("org.jruby.RubyArray","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyArray","length","length");
        runtime.addBoundMethod("org.jruby.RubyArray","insert","insert");
        runtime.addBoundMethod("org.jruby.RubyArray","delete_if","delete_if");
        runtime.addBoundMethod("org.jruby.RubyArray","reverse","reverse");
        runtime.addBoundMethod("org.jruby.RubyArray","at","at");
        runtime.addBoundMethod("org.jruby.RubyArray","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyArray","reverse_bang","reverse!");
        runtime.addBoundMethod("org.jruby.RubyArray","replace","replace");
        runtime.addBoundMethod("org.jruby.RubyArray","reject","reject");
        runtime.addBoundMethod("org.jruby.RubyArray","append","<<");
        runtime.addBoundMethod("org.jruby.RubyArray","select","select");
        runtime.addBoundMethod("org.jruby.RubyArray","op_or","|");
        runtime.addBoundMethod("org.jruby.RubyArray","eql","eql?");
        runtime.addBoundMethod("org.jruby.RubyArray","first","first");
        runtime.addBoundMethod("org.jruby.RubyArray","to_a","to_a");
        runtime.addBoundMethod("org.jruby.RubyArray","shift","shift");
        runtime.addBoundMethod("org.jruby.RubyArray","rindex","rindex");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyArray$INVOKER$i$aref(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "aref", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "aref", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        cls.addMethodAtBootTimeOnly("slice", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$choice(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "choice", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "choice", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("choice", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "hash", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$sort_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sort_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sort_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sort!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_times(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_times", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_times", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$pack(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "pack", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "pack", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("pack", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$join(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "join", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "join", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("join", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$concat(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "concat", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "concat", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("concat", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$push_m(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "push_m", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "push_m", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("push", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$product(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "product", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "product", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("product", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$compact(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "compact", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "compact", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("compact", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$flatten(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "flatten", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "flatten", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("flatten", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$sort(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sort", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sort", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sort", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$uniq(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "uniq", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "uniq", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("uniq", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$shuffle(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "shuffle", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "shuffle", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("shuffle", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$uniq_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "uniq_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "uniq_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("uniq!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$shuffle_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "shuffle_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "shuffle_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("shuffle!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$unshift(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "unshift", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "unshift", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("unshift", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$insert(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "insert", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "insert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("insert", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$flatten_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "flatten_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "flatten_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("flatten!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$aset(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "aset", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "aset", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$collect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "collect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "collect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("collect", javaMethod);
        cls.addMethodAtBootTimeOnly("map", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArray","aref","[]");
        runtime.addBoundMethod("org.jruby.RubyArray","choice","choice");
        runtime.addBoundMethod("org.jruby.RubyArray","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyArray","sort_bang","sort!");
        runtime.addBoundMethod("org.jruby.RubyArray","op_times","*");
        runtime.addBoundMethod("org.jruby.RubyArray","pack","pack");
        runtime.addBoundMethod("org.jruby.RubyArray","join","join");
        runtime.addBoundMethod("org.jruby.RubyArray","concat","concat");
        runtime.addBoundMethod("org.jruby.RubyArray","push_m","push");
        runtime.addBoundMethod("org.jruby.RubyArray","product","product");
        runtime.addBoundMethod("org.jruby.RubyArray","compact","compact");
        runtime.addBoundMethod("org.jruby.RubyArray","flatten","flatten");
        runtime.addBoundMethod("org.jruby.RubyArray","sort","sort");
        runtime.addBoundMethod("org.jruby.RubyArray","uniq","uniq");
        runtime.addBoundMethod("org.jruby.RubyArray","shuffle","shuffle");
        runtime.addBoundMethod("org.jruby.RubyArray","uniq_bang","uniq!");
        runtime.addBoundMethod("org.jruby.RubyArray","shuffle_bang","shuffle!");
        runtime.addBoundMethod("org.jruby.RubyArray","unshift","unshift");
        runtime.addBoundMethod("org.jruby.RubyArray","insert","insert");
        runtime.addBoundMethod("org.jruby.RubyArray","flatten_bang","flatten!");
        runtime.addBoundMethod("org.jruby.RubyArray","aset","[]=");
        runtime.addBoundMethod("org.jruby.RubyArray","collect","collect");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyArray$INVOKER$i$aref19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "aref19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "aref19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        cls.addMethodAtBootTimeOnly("slice", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$sort19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sort19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sort19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sort", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$rotate(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rotate", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "rotate", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rotate", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$drop(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "drop", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "drop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("drop", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$pack19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "pack19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "pack19", org.jruby.RubyString.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("pack", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$sort_by_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sort_by_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sort_by_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sort_by!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$push_m19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "push_m19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "push_m19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("push", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$select_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "select_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "select_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("select!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$compatc19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "compatc19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "compatc19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("compact", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$flatten19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "flatten19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "flatten19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("flatten", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$repeated_permutation(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "repeated_permutation", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "repeated_permutation", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("repeated_permutation", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$map19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "map19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "map19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("map", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$uniq_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "uniq_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "uniq_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("uniq!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$unshift19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "unshift19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "unshift19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("unshift", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$drop_while(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "drop_while", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "drop_while", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("drop_while", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$2$sample(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sample", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sample", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sample", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$aset19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "aset19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "aset19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$hash19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "hash19", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$sort_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sort_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "sort_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sort!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$op_times19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_times19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "op_times19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$join19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "join19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "join19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("join", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$take_while(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "take_while", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "take_while", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("take_while", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$concat19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "concat19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "concat19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("concat", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$keep_if(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "keep_if", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "keep_if", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("keep_if", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$product19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "product19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "product19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("product", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$rotate_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rotate_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "rotate_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rotate!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$uniq19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "uniq19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "uniq19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("uniq", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$repeatedCombination(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "repeatedCombination", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "repeatedCombination", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("repeated_combination", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$1$shuffle(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "shuffle", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "shuffle", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("shuffle", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$1$0$take(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "take", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "take", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("take", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$1$shuffle_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "shuffle_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "shuffle_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("shuffle!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$insert19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "insert19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "insert19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("insert", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$flatten_bang19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "flatten_bang19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "flatten_bang19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("flatten!", javaMethod);
        javaMethod = new org.jruby.RubyArray$INVOKER$i$0$0$collect19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "collect19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyArray.class, "collect19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("collect", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArray","aref19","[]");
        runtime.addBoundMethod("org.jruby.RubyArray","sort19","sort");
        runtime.addBoundMethod("org.jruby.RubyArray","rotate","rotate");
        runtime.addBoundMethod("org.jruby.RubyArray","drop","drop");
        runtime.addBoundMethod("org.jruby.RubyArray","pack19","pack");
        runtime.addBoundMethod("org.jruby.RubyArray","sort_by_bang","sort_by!");
        runtime.addBoundMethod("org.jruby.RubyArray","push_m19","push");
        runtime.addBoundMethod("org.jruby.RubyArray","select_bang","select!");
        runtime.addBoundMethod("org.jruby.RubyArray","compatc19","compact");
        runtime.addBoundMethod("org.jruby.RubyArray","flatten19","flatten");
        runtime.addBoundMethod("org.jruby.RubyArray","repeated_permutation","repeated_permutation");
        runtime.addBoundMethod("org.jruby.RubyArray","map19","map");
        runtime.addBoundMethod("org.jruby.RubyArray","uniq_bang19","uniq!");
        runtime.addBoundMethod("org.jruby.RubyArray","unshift19","unshift");
        runtime.addBoundMethod("org.jruby.RubyArray","drop_while","drop_while");
        runtime.addBoundMethod("org.jruby.RubyArray","sample","sample");
        runtime.addBoundMethod("org.jruby.RubyArray","aset19","[]=");
        runtime.addBoundMethod("org.jruby.RubyArray","hash19","hash");
        runtime.addBoundMethod("org.jruby.RubyArray","sort_bang19","sort!");
        runtime.addBoundMethod("org.jruby.RubyArray","op_times19","*");
        runtime.addBoundMethod("org.jruby.RubyArray","join19","join");
        runtime.addBoundMethod("org.jruby.RubyArray","take_while","take_while");
        runtime.addBoundMethod("org.jruby.RubyArray","concat19","concat");
        runtime.addBoundMethod("org.jruby.RubyArray","keep_if","keep_if");
        runtime.addBoundMethod("org.jruby.RubyArray","product19","product");
        runtime.addBoundMethod("org.jruby.RubyArray","rotate_bang","rotate!");
        runtime.addBoundMethod("org.jruby.RubyArray","uniq19","uniq");
        runtime.addBoundMethod("org.jruby.RubyArray","repeatedCombination","repeated_combination");
        runtime.addBoundMethod("org.jruby.RubyArray","shuffle","shuffle");
        runtime.addBoundMethod("org.jruby.RubyArray","take","take");
        runtime.addBoundMethod("org.jruby.RubyArray","shuffle_bang","shuffle!");
        runtime.addBoundMethod("org.jruby.RubyArray","insert19","insert");
        runtime.addBoundMethod("org.jruby.RubyArray","flatten_bang19","flatten!");
        runtime.addBoundMethod("org.jruby.RubyArray","collect19","collect");
        }
    }
    static {
     }
}
