/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyThread$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyThread$INVOKER$s$1$0$kill(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "kill", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "kill", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("kill", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$exit(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "exit", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "exit", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("exit", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$stop(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "stop", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "stop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("stop", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "newInstance", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("fork", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$current(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "current", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "current", org.jruby.RubyThread.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("current", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$list(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "list", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "list", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("list", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$abort_on_exception_x(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "abort_on_exception_x", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "abort_on_exception_x", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("abort_on_exception", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$1$0$abort_on_exception_set_x(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "abort_on_exception_set_x", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "abort_on_exception_set_x", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("abort_on_exception=", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$pass(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pass", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "pass", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("pass", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$main(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "main", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "main", org.jruby.RubyThread.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("main", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","kill","kill");
        runtime.addBoundMethod("org.jruby.RubyThread","exit","exit");
        runtime.addBoundMethod("org.jruby.RubyThread","stop","stop");
        runtime.addBoundMethod("org.jruby.RubyThread","newInstance","new");
        runtime.addBoundMethod("org.jruby.RubyThread","current","current");
        runtime.addBoundMethod("org.jruby.RubyThread","list","list");
        runtime.addBoundMethod("org.jruby.RubyThread","abort_on_exception_x","abort_on_exception");
        runtime.addBoundMethod("org.jruby.RubyThread","abort_on_exception_set_x","abort_on_exception=");
        runtime.addBoundMethod("org.jruby.RubyThread","pass","pass");
        runtime.addBoundMethod("org.jruby.RubyThread","main","main");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$critical(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "critical", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "critical", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("critical", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$1$0$critical_set(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "critical_set", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "critical_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("critical=", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$start(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "start", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "start", org.jruby.RubyThread.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("start", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","critical","critical");
        runtime.addBoundMethod("org.jruby.RubyThread","critical_set","critical=");
        runtime.addBoundMethod("org.jruby.RubyThread","start","start");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyThread$INVOKER$s$0$0$start19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "start19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "start19", org.jruby.RubyThread.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("start", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","start19","start");
        }
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$alive_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "alive_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "alive_p", org.jruby.RubyBoolean.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("alive?", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$1$0$op_aref(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "op_aref", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$status(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "status", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "status", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("status", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$group(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "group", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "group", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("group", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$keys(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "keys", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "keys", org.jruby.RubyArray.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("keys", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$kill(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "kill", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "kill", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("kill", javaMethod);
        cls.addMethodAtBootTimeOnly("exit", javaMethod);
        cls.addMethodAtBootTimeOnly("terminate", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$3$raise(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "raise", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "raise", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("raise", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$1$join(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "join", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "join", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("join", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$value(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "value", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "value", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("value", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$run(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "run", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "run", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("run", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$1$0$abort_on_exception_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "abort_on_exception_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "abort_on_exception_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("abort_on_exception=", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$1$0$priority_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "priority_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "priority_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("priority=", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$safe_level(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "safe_level", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "safe_level", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("safe_level", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$stop_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "stop_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "stop_p", org.jruby.RubyBoolean.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("stop?", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$1$0$key_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "key_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "key_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("key?", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$priority(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "priority", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "priority", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("priority", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$wakeup(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "wakeup", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "wakeup", org.jruby.RubyThread.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("wakeup", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$abort_on_exception(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "abort_on_exception", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "abort_on_exception", org.jruby.RubyBoolean.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("abort_on_exception", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyThread$INVOKER$i$2$0$op_aset(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "op_aset", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "op_aset", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","alive_p","alive?");
        runtime.addBoundMethod("org.jruby.RubyThread","initialize","initialize");
        runtime.addBoundMethod("org.jruby.RubyThread","op_aref","[]");
        runtime.addBoundMethod("org.jruby.RubyThread","status","status");
        runtime.addBoundMethod("org.jruby.RubyThread","group","group");
        runtime.addBoundMethod("org.jruby.RubyThread","keys","keys");
        runtime.addBoundMethod("org.jruby.RubyThread","kill","kill");
        runtime.addBoundMethod("org.jruby.RubyThread","raise","raise");
        runtime.addBoundMethod("org.jruby.RubyThread","join","join");
        runtime.addBoundMethod("org.jruby.RubyThread","value","value");
        runtime.addBoundMethod("org.jruby.RubyThread","run","run");
        runtime.addBoundMethod("org.jruby.RubyThread","abort_on_exception_set","abort_on_exception=");
        runtime.addBoundMethod("org.jruby.RubyThread","priority_set","priority=");
        runtime.addBoundMethod("org.jruby.RubyThread","safe_level","safe_level");
        runtime.addBoundMethod("org.jruby.RubyThread","stop_p","stop?");
        runtime.addBoundMethod("org.jruby.RubyThread","key_p","key?");
        runtime.addBoundMethod("org.jruby.RubyThread","priority","priority");
        runtime.addBoundMethod("org.jruby.RubyThread","wakeup","wakeup");
        runtime.addBoundMethod("org.jruby.RubyThread","abort_on_exception","abort_on_exception");
        runtime.addBoundMethod("org.jruby.RubyThread","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyThread","op_aset","[]=");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$kill_bang(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "kill_bang", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "kill_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("kill!", javaMethod);
        cls.addMethodAtBootTimeOnly("exit!", javaMethod);
        cls.addMethodAtBootTimeOnly("terminate!", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","kill_bang","kill!");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyThread$INVOKER$i$0$0$backtrace(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "backtrace", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyThread.class, "backtrace", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("backtrace", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyThread","backtrace","backtrace");
        }
    }
    static {
     }
}
