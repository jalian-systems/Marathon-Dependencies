/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyIO$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$0$popen3(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "popen3", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "popen3", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("popen3", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "newInstance", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("for_fd", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$0$open(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "open", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "open", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$3$select(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "select", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "select", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        singletonClass.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$1$readlines(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "readlines", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readlines", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$0$popen4(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "popen4", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "popen4", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("popen4", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","popen3","popen3");
        runtime.addBoundMethod("org.jruby.RubyIO","newInstance","new");
        runtime.addBoundMethod("org.jruby.RubyIO","open","open");
        runtime.addBoundMethod("org.jruby.RubyIO","select","select");
        runtime.addBoundMethod("org.jruby.RubyIO","readlines","readlines");
        runtime.addBoundMethod("org.jruby.RubyIO","popen4","popen4");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$sysopen(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysopen", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sysopen", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("sysopen", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$readStatic(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "readStatic", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readStatic", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$1$foreach(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "foreach", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "foreach", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$1$popen(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "popen", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "popen", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("popen", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$0$pipe(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pipe", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "pipe", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("pipe", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","sysopen","sysopen");
        runtime.addBoundMethod("org.jruby.RubyIO","readStatic","read");
        runtime.addBoundMethod("org.jruby.RubyIO","foreach","foreach");
        runtime.addBoundMethod("org.jruby.RubyIO","popen","popen");
        runtime.addBoundMethod("org.jruby.RubyIO","pipe","pipe");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$binread(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "binread", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "binread", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        singletonClass.addMethodAtBootTimeOnly("binread", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$foreach19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "foreach19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "foreach19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$1$binwrite(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "binwrite", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "binwrite", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        singletonClass.addMethodAtBootTimeOnly("binwrite", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$sysopen19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysopen19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sysopen19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("sysopen", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$writeStatic(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "writeStatic", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "writeStatic", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("write", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$3$read19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "read19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "read19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$1$0$tryConvert(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "tryConvert", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "tryConvert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$0$2$popen19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "popen19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "popen19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        singletonClass.addMethodAtBootTimeOnly("popen", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$pipe19(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "pipe19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "pipe19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("pipe", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$s$2$0$copy_stream(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "copy_stream", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "copy_stream", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("copy_stream", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","binread","binread");
        runtime.addBoundMethod("org.jruby.RubyIO","foreach19","foreach");
        runtime.addBoundMethod("org.jruby.RubyIO","binwrite","binwrite");
        runtime.addBoundMethod("org.jruby.RubyIO","sysopen19","sysopen");
        runtime.addBoundMethod("org.jruby.RubyIO","writeStatic","write");
        runtime.addBoundMethod("org.jruby.RubyIO","read19","read");
        runtime.addBoundMethod("org.jruby.RubyIO","tryConvert","try_convert");
        runtime.addBoundMethod("org.jruby.RubyIO","popen19","popen");
        runtime.addBoundMethod("org.jruby.RubyIO","pipe19","pipe");
        runtime.addBoundMethod("org.jruby.RubyIO","copy_stream","copy_stream");
        }
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$sync_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "sync_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sync_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("sync=", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$write_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "write_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "write_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("write_nonblock", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$lineno_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "lineno_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "lineno_set", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("lineno=", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$each_line(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "each_line", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each_line", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$pos(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pos", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "pos", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$close(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "close", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$codepoints(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "codepoints", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "codepoints", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("codepoints", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$puts(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "puts", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "puts", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("puts", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$ioctl(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "ioctl", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "ioctl", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("ioctl", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$tty_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "tty_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "tty_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("tty?", javaMethod);
        cls.addMethodAtBootTimeOnly("isatty", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$stat(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "stat", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "stat", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("stat", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$pos_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "pos_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "pos_set", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$each_codepoint(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_codepoint", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each_codepoint", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_codepoint", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$fileno(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "fileno", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "fileno", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("fileno", javaMethod);
        cls.defineAlias("to_i", "fileno");
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$each(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "each", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$lineno(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lineno", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "lineno", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("lineno", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$closed_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "closed_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "closed_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("closed?", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$readpartial(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "readpartial", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readpartial", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("readpartial", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$reopen(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "reopen", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "reopen", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("reopen", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$autoclose_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "autoclose_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "autoclose_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("autoclose=", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$each_byte(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_byte", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each_byte", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$bytes(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "bytes", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "bytes", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$rewind(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rewind", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "rewind", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$close_read(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "close_read", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "close_read", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("close_read", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$autoclose(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "autoclose", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "autoclose", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("autoclose", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$readlines(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "readlines", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readlines", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$sysread(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysread", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sysread", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sysread", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$eof_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "eof_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "eof_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("eof?", javaMethod);
        cls.addMethodAtBootTimeOnly("eof", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$close_write(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "close_write", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "close_write", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("close_write", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$sync(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sync", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sync", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("sync", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$write(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "write", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "write", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("write", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$read(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "read", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "read", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$printf(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "printf", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "printf", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("printf", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$putc(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "putc", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "putc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("putc", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$readline(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "readline", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readline", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$to_io(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_io", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "to_io", org.jruby.RubyIO.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_io", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$pid(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pid", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "pid", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("pid", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$syswrite(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "syswrite", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "syswrite", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("syswrite", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$readbyte(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "readbyte", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readbyte", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("readbyte", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$print(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "print", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "print", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("print", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$fcntl(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "fcntl", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "fcntl", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("fcntl", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$seek(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "seek", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "seek", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("seek", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$sysseek(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysseek", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "sysseek", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sysseek", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$flush(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "flush", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "flush", org.jruby.RubyIO.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("flush", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$fsync(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "fsync", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "fsync", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("fsync", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$op_append(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_append", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "op_append", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$read_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "read_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "read_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("read_nonblock", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$binmode(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "binmode", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "binmode", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("binmode", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","sync_set","sync=");
        runtime.addBoundMethod("org.jruby.RubyIO","write_nonblock","write_nonblock");
        runtime.addBoundMethod("org.jruby.RubyIO","lineno_set","lineno=");
        runtime.addBoundMethod("org.jruby.RubyIO","each_line","each_line");
        runtime.addBoundMethod("org.jruby.RubyIO","pos","pos");
        runtime.addBoundMethod("org.jruby.RubyIO","close","close");
        runtime.addBoundMethod("org.jruby.RubyIO","codepoints","codepoints");
        runtime.addBoundMethod("org.jruby.RubyIO","puts","puts");
        runtime.addBoundMethod("org.jruby.RubyIO","ioctl","ioctl");
        runtime.addBoundMethod("org.jruby.RubyIO","tty_p","tty?");
        runtime.addBoundMethod("org.jruby.RubyIO","stat","stat");
        runtime.addBoundMethod("org.jruby.RubyIO","pos_set","pos=");
        runtime.addBoundMethod("org.jruby.RubyIO","each_codepoint","each_codepoint");
        runtime.addBoundMethod("org.jruby.RubyIO","fileno","fileno");
        runtime.addBoundMethod("org.jruby.RubyIO","each","each");
        runtime.addBoundMethod("org.jruby.RubyIO","lineno","lineno");
        runtime.addBoundMethod("org.jruby.RubyIO","closed_p","closed?");
        runtime.addBoundMethod("org.jruby.RubyIO","readpartial","readpartial");
        runtime.addBoundMethod("org.jruby.RubyIO","reopen","reopen");
        runtime.addBoundMethod("org.jruby.RubyIO","autoclose_set","autoclose=");
        runtime.addBoundMethod("org.jruby.RubyIO","each_byte","each_byte");
        runtime.addBoundMethod("org.jruby.RubyIO","bytes","bytes");
        runtime.addBoundMethod("org.jruby.RubyIO","rewind","rewind");
        runtime.addBoundMethod("org.jruby.RubyIO","close_read","close_read");
        runtime.addBoundMethod("org.jruby.RubyIO","autoclose","autoclose");
        runtime.addBoundMethod("org.jruby.RubyIO","readlines","readlines");
        runtime.addBoundMethod("org.jruby.RubyIO","sysread","sysread");
        runtime.addBoundMethod("org.jruby.RubyIO","eof_p","eof?");
        runtime.addBoundMethod("org.jruby.RubyIO","close_write","close_write");
        runtime.addBoundMethod("org.jruby.RubyIO","sync","sync");
        runtime.addBoundMethod("org.jruby.RubyIO","write","write");
        runtime.addBoundMethod("org.jruby.RubyIO","read","read");
        runtime.addBoundMethod("org.jruby.RubyIO","printf","printf");
        runtime.addBoundMethod("org.jruby.RubyIO","putc","putc");
        runtime.addBoundMethod("org.jruby.RubyIO","readline","readline");
        runtime.addBoundMethod("org.jruby.RubyIO","to_io","to_io");
        runtime.addBoundMethod("org.jruby.RubyIO","pid","pid");
        runtime.addBoundMethod("org.jruby.RubyIO","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyIO","syswrite","syswrite");
        runtime.addBoundMethod("org.jruby.RubyIO","readbyte","readbyte");
        runtime.addBoundMethod("org.jruby.RubyIO","print","print");
        runtime.addBoundMethod("org.jruby.RubyIO","fcntl","fcntl");
        runtime.addBoundMethod("org.jruby.RubyIO","seek","seek");
        runtime.addBoundMethod("org.jruby.RubyIO","sysseek","sysseek");
        runtime.addBoundMethod("org.jruby.RubyIO","flush","flush");
        runtime.addBoundMethod("org.jruby.RubyIO","fsync","fsync");
        runtime.addBoundMethod("org.jruby.RubyIO","op_append","<<");
        runtime.addBoundMethod("org.jruby.RubyIO","read_nonblock","read_nonblock");
        runtime.addBoundMethod("org.jruby.RubyIO","binmode","binmode");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$chars(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chars", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "chars", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$1$initialize(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$getc(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "getc", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "getc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$each_char(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_char", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each_char", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$ungetc(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "ungetc", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "ungetc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$gets(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gets", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "gets", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$readchar(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "readchar", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readchar", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("readchar", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$lines(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lines", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "lines", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("lines", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","chars","chars");
        runtime.addBoundMethod("org.jruby.RubyIO","initialize","initialize");
        runtime.addBoundMethod("org.jruby.RubyIO","getc","getc");
        runtime.addBoundMethod("org.jruby.RubyIO","each_char","each_char");
        runtime.addBoundMethod("org.jruby.RubyIO","ungetc","ungetc");
        runtime.addBoundMethod("org.jruby.RubyIO","gets","gets");
        runtime.addBoundMethod("org.jruby.RubyIO","readchar","readchar");
        runtime.addBoundMethod("org.jruby.RubyIO","lines","lines");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$op_binmode(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "op_binmode", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "op_binmode", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("binmode?", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$getbyte19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "getbyte19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "getbyte19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$external_encoding(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "external_encoding", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "external_encoding", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("external_encoding", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$set_encoding(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "set_encoding", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "set_encoding", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("set_encoding", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$gets19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "gets19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "gets19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$readchar19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "readchar19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "readchar19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("readchar", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$each_char19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "each_char19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "each_char19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$internal_encoding(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "internal_encoding", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "internal_encoding", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("internal_encoding", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$getc19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "getc19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "getc19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$1$0$ungetc19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "ungetc19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "ungetc19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$lines19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "lines19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "lines19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("lines", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$0$0$chars19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "chars19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "chars19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new org.jruby.RubyIO$INVOKER$i$initialize19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyIO.class, "initialize19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO","op_binmode","binmode?");
        runtime.addBoundMethod("org.jruby.RubyIO","getbyte19","getbyte");
        runtime.addBoundMethod("org.jruby.RubyIO","external_encoding","external_encoding");
        runtime.addBoundMethod("org.jruby.RubyIO","set_encoding","set_encoding");
        runtime.addBoundMethod("org.jruby.RubyIO","gets19","gets");
        runtime.addBoundMethod("org.jruby.RubyIO","readchar19","readchar");
        runtime.addBoundMethod("org.jruby.RubyIO","each_char19","each_char");
        runtime.addBoundMethod("org.jruby.RubyIO","internal_encoding","internal_encoding");
        runtime.addBoundMethod("org.jruby.RubyIO","getc19","getc");
        runtime.addBoundMethod("org.jruby.RubyIO","ungetc19","ungetc");
        runtime.addBoundMethod("org.jruby.RubyIO","lines19","lines");
        runtime.addBoundMethod("org.jruby.RubyIO","chars19","chars");
        runtime.addBoundMethod("org.jruby.RubyIO","initialize19","initialize");
        }
    }
    static {
        ASTInspector.addScopeAwareMethods("readline","gets","print");
     }
}
