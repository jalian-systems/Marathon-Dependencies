/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyKernel$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$taint(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "taint", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "taint", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("taint", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$instance_variable_get(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "instance_variable_get", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_variable_get", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_variable_get", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_eqq(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_eqq", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_eqq", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$test(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "test", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "test", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("test", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("test", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$readlines(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "readlines", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "readlines", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("readlines", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$instance_variable_defined_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "instance_variable_defined_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_variable_defined_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_variable_defined?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$sprintf(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "sprintf", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "sprintf", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sprintf", javaMethod);
        cls.addMethodAtBootTimeOnly("format", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("sprintf", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("format", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$set_trace_func(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "set_trace_func", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "set_trace_func", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("set_trace_func", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("set_trace_func", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_array(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_array", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_array", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Array", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Array", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$global_variables(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "global_variables", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "global_variables", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("global_variables", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("global_variables", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$trace_var(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "trace_var", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "trace_var", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("trace_var", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("trace_var", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$dup(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "dup", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "dup", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("dup", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$untaint(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "untaint", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "untaint", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("untaint", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$frozen_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "frozen_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "frozen_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("frozen?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$puts(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "puts", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "puts", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("puts", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("puts", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$warn(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "warn", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "warn", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("warn", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("warn", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$binding(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "binding", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "binding", org.jruby.RubyBinding.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("binding", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("binding", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$instance_of_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "instance_of_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_of_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_of?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$rbClone(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "rbClone", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rbClone", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("clone", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "hash", org.jruby.RubyFixnum.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$type(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "type", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "type", org.jruby.RubyClass.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("class", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$display(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "display", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "display", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("display", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$sleep(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "sleep", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "sleep", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sleep", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("sleep", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$exit(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "exit", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "exit", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("exit", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("exit", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$srand(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "srand", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "srand", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("srand", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("srand", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$instance_variables(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "instance_variables", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_variables", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_variables", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$local_variables(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "local_variables", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "local_variables", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("local_variables", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("local_variables", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$inspect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "inspect", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "inspect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$untrace_var(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "untrace_var", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "untrace_var", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("untrace_var", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("untrace_var", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$3$raise(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "raise", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "raise", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("raise", javaMethod);
        cls.addMethodAtBootTimeOnly("fail", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("raise", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("fail", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$kind_of_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "kind_of_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "kind_of_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("kind_of?", javaMethod);
        cls.addMethodAtBootTimeOnly("is_a?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$autoload_p(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "autoload_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "autoload_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("autoload?", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("autoload?", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$caller(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "caller", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "caller", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("caller", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("caller", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$tap(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "tap", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "tap", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("tap", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("tap", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$loop(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "loop", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "loop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("loop", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("loop", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$2$0$autoload(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 2, "autoload", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "autoload", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("autoload", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("autoload", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$9$syscall(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "syscall", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "syscall", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("syscall", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("syscall", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$printf(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "printf", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "printf", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("printf", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("printf", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$block_given_p(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "block_given_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "block_given_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("block_given?", javaMethod);
        cls.addMethodAtBootTimeOnly("iterator?", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("block_given?", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("iterator?", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$at_exit(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "at_exit", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "at_exit", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("at_exit", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("at_exit", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$putc(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "putc", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "putc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("putc", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("putc", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$tainted_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "tainted_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "tainted_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("tainted?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$readline(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "readline", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "readline", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("readline", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$__method__(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "__method__", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "__method__", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("__method__", javaMethod);
        cls.addMethodAtBootTimeOnly("__callee__", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("__method__", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("__callee__", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$extend(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "extend", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "extend", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("extend", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$backquote(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "backquote", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "backquote", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("`", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("`", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$gets(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "gets", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "gets", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gets", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$exit_bang(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "exit_bang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "exit_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("exit!", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("exit!", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$initialize_copy(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "initialize_copy", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "initialize_copy", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$print(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "print", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "print", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("print", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("print", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$2$0$instance_variable_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 2, "instance_variable_set", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_variable_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_variable_set", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$nil_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "nil_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "nil_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("nil?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$callcc(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "callcc", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "callcc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("callcc", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("callcc", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$getc(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "getc", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "getc", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("getc", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$freeze(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "freeze", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "freeze", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("freeze", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$p(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("p", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("p", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "method", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "method", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$3$select(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "select", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "select", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("select", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$eql_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "eql_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "eql_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$remove_instance_variable(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "remove_instance_variable", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "remove_instance_variable", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("remove_instance_variable", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$abort(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "abort", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "abort", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("abort", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("abort", moduleMethod);
        runtime.addBoundMethod("org.jruby.RubyKernel","taint","taint");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_variable_get","instance_variable_get");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_eqq","===");
        runtime.addBoundMethod("org.jruby.RubyKernel","test","test");
        runtime.addBoundMethod("org.jruby.RubyKernel","readlines","readlines");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_variable_defined_p","instance_variable_defined?");
        runtime.addBoundMethod("org.jruby.RubyKernel","sprintf","sprintf");
        runtime.addBoundMethod("org.jruby.RubyKernel","set_trace_func","set_trace_func");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_array","Array");
        runtime.addBoundMethod("org.jruby.RubyKernel","global_variables","global_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","trace_var","trace_var");
        runtime.addBoundMethod("org.jruby.RubyKernel","dup","dup");
        runtime.addBoundMethod("org.jruby.RubyKernel","untaint","untaint");
        runtime.addBoundMethod("org.jruby.RubyKernel","frozen_p","frozen?");
        runtime.addBoundMethod("org.jruby.RubyKernel","puts","puts");
        runtime.addBoundMethod("org.jruby.RubyKernel","warn","warn");
        runtime.addBoundMethod("org.jruby.RubyKernel","binding","binding");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_of_p","instance_of?");
        runtime.addBoundMethod("org.jruby.RubyKernel","rbClone","clone");
        runtime.addBoundMethod("org.jruby.RubyKernel","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyKernel","type","class");
        runtime.addBoundMethod("org.jruby.RubyKernel","display","display");
        runtime.addBoundMethod("org.jruby.RubyKernel","sleep","sleep");
        runtime.addBoundMethod("org.jruby.RubyKernel","exit","exit");
        runtime.addBoundMethod("org.jruby.RubyKernel","srand","srand");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_variables","instance_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","local_variables","local_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","inspect","inspect");
        runtime.addBoundMethod("org.jruby.RubyKernel","untrace_var","untrace_var");
        runtime.addBoundMethod("org.jruby.RubyKernel","kind_of_p","kind_of?");
        runtime.addBoundMethod("org.jruby.RubyKernel","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyKernel","autoload_p","autoload?");
        runtime.addBoundMethod("org.jruby.RubyKernel","tap","tap");
        runtime.addBoundMethod("org.jruby.RubyKernel","loop","loop");
        runtime.addBoundMethod("org.jruby.RubyKernel","autoload","autoload");
        runtime.addBoundMethod("org.jruby.RubyKernel","syscall","syscall");
        runtime.addBoundMethod("org.jruby.RubyKernel","printf","printf");
        runtime.addBoundMethod("org.jruby.RubyKernel","block_given_p","block_given?");
        runtime.addBoundMethod("org.jruby.RubyKernel","at_exit","at_exit");
        runtime.addBoundMethod("org.jruby.RubyKernel","putc","putc");
        runtime.addBoundMethod("org.jruby.RubyKernel","tainted_p","tainted?");
        runtime.addBoundMethod("org.jruby.RubyKernel","readline","readline");
        runtime.addBoundMethod("org.jruby.RubyKernel","extend","extend");
        runtime.addBoundMethod("org.jruby.RubyKernel","backquote","`");
        runtime.addBoundMethod("org.jruby.RubyKernel","gets","gets");
        runtime.addBoundMethod("org.jruby.RubyKernel","exit_bang","exit!");
        runtime.addBoundMethod("org.jruby.RubyKernel","initialize_copy","initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyKernel","print","print");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_variable_set","instance_variable_set");
        runtime.addBoundMethod("org.jruby.RubyKernel","nil_p","nil?");
        runtime.addBoundMethod("org.jruby.RubyKernel","callcc","callcc");
        runtime.addBoundMethod("org.jruby.RubyKernel","getc","getc");
        runtime.addBoundMethod("org.jruby.RubyKernel","freeze","freeze");
        runtime.addBoundMethod("org.jruby.RubyKernel","p","p");
        runtime.addBoundMethod("org.jruby.RubyKernel","method","method");
        runtime.addBoundMethod("org.jruby.RubyKernel","select","select");
        runtime.addBoundMethod("org.jruby.RubyKernel","eql_p","eql?");
        runtime.addBoundMethod("org.jruby.RubyKernel","remove_instance_variable","remove_instance_variable");
        runtime.addBoundMethod("org.jruby.RubyKernel","abort","abort");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "methods", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "methods", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$sub(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "sub", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "sub", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("sub", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$send(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "send", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "send", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("send", javaMethod);
        cls.addMethodAtBootTimeOnly("__send__", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$gsub(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "gsub", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "gsub", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gsub", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$gsub_bang(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "gsub_bang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "gsub_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("gsub!", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gsub!", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$rbCatch(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "rbCatch", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rbCatch", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("catch", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("catch", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$3$instance_exec(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "instance_exec", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_exec", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("instance_exec", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$type_deprecated(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "type_deprecated", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "type_deprecated", org.jruby.RubyClass.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("type", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$private_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_methods", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "private_methods", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$chomp(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "chomp", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "chomp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("chomp", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("chomp", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$singleton_method_added(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "singleton_method_added", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_method_added", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("singleton_method_added", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("singleton_method_added", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_match", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("=~", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$id_deprecated(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "id_deprecated", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "id_deprecated", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("id", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$rbThrow(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbThrow", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rbThrow", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("throw", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("throw", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$public_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_methods", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "public_methods", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$equal_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "equal_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "equal_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("equal?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$split(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "split", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "split", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("split", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("split", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$chop(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "chop", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "chop", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chop", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("chop", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$instance_eval(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "instance_eval", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_eval", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("instance_eval", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$scan(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "scan", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "scan", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("scan", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("scan", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$rand18(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rand18", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rand18", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("rand", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("rand", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$proc(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "proc", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "proc", org.jruby.RubyProc.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("proc", javaMethod);
        cls.addMethodAtBootTimeOnly("lambda", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("proc", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("lambda", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_float(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_float", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_float", org.jruby.RubyFloat.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Float", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Float", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$method_missing(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "method_missing", true, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyKernel.class, "method_missing", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("method_missing", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$3$eval(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "eval", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "eval", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("eval", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("eval", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$fork(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "fork", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "fork", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("fork", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("fork", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$singleton_method_removed(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "singleton_method_removed", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_method_removed", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("singleton_method_removed", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("singleton_method_removed", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$id(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "id", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "id", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("object_id", javaMethod);
        cls.addMethodAtBootTimeOnly("__id__", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$load(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "load", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "load", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("load", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("load", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$singleton_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "singleton_methods", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_methods", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("singleton_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$respond_to_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "respond_to_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "respond_to_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("respond_to?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$system(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "system", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "system", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("system", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("system", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$protected_methods(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "protected_methods", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "protected_methods", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("protected_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$2$open(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "open", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "open", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("open", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("open", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$chomp_bang(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "chomp_bang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "chomp_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("chomp!", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("chomp!", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_string(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_string", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_string", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("String", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("String", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$require(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "require", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "require", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("require", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("require", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$exec(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "exec", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "exec", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("exec", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("exec", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_integer(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_integer", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_integer", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Integer", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Integer", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$singleton_method_undefined(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "singleton_method_undefined", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_method_undefined", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("singleton_method_undefined", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("singleton_method_undefined", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$to_a(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_a", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "to_a", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$chop_bang(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "chop_bang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "chop_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("chop!", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("chop!", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$sub_bang(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "sub_bang", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "sub_bang", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("sub!", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("sub!", moduleMethod);
        runtime.addBoundMethod("org.jruby.RubyKernel","methods","methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","sub","sub");
        runtime.addBoundMethod("org.jruby.RubyKernel","send","send");
        runtime.addBoundMethod("org.jruby.RubyKernel","gsub","gsub");
        runtime.addBoundMethod("org.jruby.RubyKernel","gsub_bang","gsub!");
        runtime.addBoundMethod("org.jruby.RubyKernel","rbCatch","catch");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_exec","instance_exec");
        runtime.addBoundMethod("org.jruby.RubyKernel","type_deprecated","type");
        runtime.addBoundMethod("org.jruby.RubyKernel","private_methods","private_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","chomp","chomp");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_method_added","singleton_method_added");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_match","=~");
        runtime.addBoundMethod("org.jruby.RubyKernel","id_deprecated","id");
        runtime.addBoundMethod("org.jruby.RubyKernel","rbThrow","throw");
        runtime.addBoundMethod("org.jruby.RubyKernel","public_methods","public_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","equal_p","equal?");
        runtime.addBoundMethod("org.jruby.RubyKernel","split","split");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyKernel","chop","chop");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_eval","instance_eval");
        runtime.addBoundMethod("org.jruby.RubyKernel","scan","scan");
        runtime.addBoundMethod("org.jruby.RubyKernel","rand18","rand");
        runtime.addBoundMethod("org.jruby.RubyKernel","proc","proc");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_float","Float");
        runtime.addBoundMethod("org.jruby.RubyKernel","method_missing","method_missing");
        runtime.addBoundMethod("org.jruby.RubyKernel","eval","eval");
        runtime.addBoundMethod("org.jruby.RubyKernel","fork","fork");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_method_removed","singleton_method_removed");
        runtime.addBoundMethod("org.jruby.RubyKernel","id","object_id");
        runtime.addBoundMethod("org.jruby.RubyKernel","load","load");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_methods","singleton_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","respond_to_p","respond_to?");
        runtime.addBoundMethod("org.jruby.RubyKernel","system","system");
        runtime.addBoundMethod("org.jruby.RubyKernel","protected_methods","protected_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","open","open");
        runtime.addBoundMethod("org.jruby.RubyKernel","chomp_bang","chomp!");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_string","String");
        runtime.addBoundMethod("org.jruby.RubyKernel","require","require");
        runtime.addBoundMethod("org.jruby.RubyKernel","exec","exec");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_integer","Integer");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_method_undefined","singleton_method_undefined");
        runtime.addBoundMethod("org.jruby.RubyKernel","to_a","to_a");
        runtime.addBoundMethod("org.jruby.RubyKernel","chop_bang","chop!");
        runtime.addBoundMethod("org.jruby.RubyKernel","sub_bang","sub!");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "methods19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "methods19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$lambda(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "lambda", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "lambda", org.jruby.RubyProc.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("lambda", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("lambda", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$send19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "send19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "send19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("send", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$respond_to_missing_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "respond_to_missing_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "respond_to_missing_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("respond_to_missing?", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("respond_to_missing?", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$_exec_internal(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "_exec_internal", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "_exec_internal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("_exec_internal", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("_exec_internal", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$to_enum(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "to_enum", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "to_enum", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("to_enum", javaMethod);
        cls.addMethodAtBootTimeOnly("enum_for", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$rbCatch19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbCatch19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rbCatch19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("catch", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("catch", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$trust(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "trust", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "trust", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("trust", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$private_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "private_methods19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "private_methods19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("private_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$initialize_clone(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "initialize_clone", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "initialize_clone", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_clone", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$global_variables19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "global_variables19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "global_variables19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("global_variables", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("global_variables", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$new_complex(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "new_complex", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_complex", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Complex", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Complex", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_cmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_cmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_match19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_match19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_match19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("=~", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$define_singleton_method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "define_singleton_method", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "define_singleton_method", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("define_singleton_method", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_hash(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_hash", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_hash", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Hash", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Hash", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$2$open19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "open19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "open19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("open", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("open", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$rbThrow19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rbThrow19", true, CallConfiguration.FrameFullScopeNone, false, org.jruby.RubyKernel.class, "rbThrow19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("throw", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("throw", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$public_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_methods19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "public_methods19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("public_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$rand19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "rand19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "rand19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("rand", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("rand", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$proc_1_9(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "proc_1_9", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "proc_1_9", org.jruby.RubyProc.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("proc", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("proc", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$untrust(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "untrust", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "untrust", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("untrust", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_float19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_float19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_float19", org.jruby.RubyFloat.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Float", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Float", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$new_rational(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "new_rational", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_rational", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Rational", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Rational", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$fork19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "fork19", true, CallConfiguration.FrameNoneScopeNone, true, org.jruby.RubyKernel.class, "fork19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("fork", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("fork", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$initialize_dup(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "initialize_dup", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "initialize_dup", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("initialize_dup", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$3$eval19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "eval19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "eval19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("eval", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("eval", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$untrusted_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "untrusted_p", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "untrusted_p", org.jruby.RubyBoolean.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("untrusted?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$singleton_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "singleton_methods19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_methods19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("singleton_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$singleton_class(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "singleton_class", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "singleton_class", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("singleton_class", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("singleton_class", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$respond_to_p19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "respond_to_p19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "respond_to_p19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("respond_to?", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$public_send(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "public_send", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "public_send", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("public_send", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$public_method(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "public_method", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "public_method", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("public_method", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("public_method", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$op_not_match(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_not_match", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "op_not_match", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("!~", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$system19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "system19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "system19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("system", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("system", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$protected_methods19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "protected_methods19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "protected_methods19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("protected_methods", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$instance_variables19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "instance_variables19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "instance_variables19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("instance_variables", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$new_string19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "new_string19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_string19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("String", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("String", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$local_variables19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "local_variables19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "local_variables19", org.jruby.RubyArray.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("local_variables", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("local_variables", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$0$binding19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 0, "binding19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "binding19", org.jruby.RubyBinding.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("binding", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("binding", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$method19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "method19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "method19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("method", javaMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$1$0$require19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, 1, "require19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "require19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("require", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("require", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$0$1$load19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "load19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "load19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("load", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("load", moduleMethod);
        javaMethod = new org.jruby.RubyKernel$INVOKER$s$new_integer19(cls, Visibility.PRIVATE);
        populateMethod(javaMethod, -1, "new_integer19", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyKernel.class, "new_integer19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("Integer", javaMethod);
        moduleMethod = populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("Integer", moduleMethod);
        runtime.addBoundMethod("org.jruby.RubyKernel","methods19","methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","lambda","lambda");
        runtime.addBoundMethod("org.jruby.RubyKernel","send19","send");
        runtime.addBoundMethod("org.jruby.RubyKernel","respond_to_missing_p","respond_to_missing?");
        runtime.addBoundMethod("org.jruby.RubyKernel","_exec_internal","_exec_internal");
        runtime.addBoundMethod("org.jruby.RubyKernel","to_enum","to_enum");
        runtime.addBoundMethod("org.jruby.RubyKernel","rbCatch19","catch");
        runtime.addBoundMethod("org.jruby.RubyKernel","trust","trust");
        runtime.addBoundMethod("org.jruby.RubyKernel","private_methods19","private_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","initialize_clone","initialize_clone");
        runtime.addBoundMethod("org.jruby.RubyKernel","global_variables19","global_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_complex","Complex");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_cmp","<=>");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_match19","=~");
        runtime.addBoundMethod("org.jruby.RubyKernel","define_singleton_method","define_singleton_method");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_hash","Hash");
        runtime.addBoundMethod("org.jruby.RubyKernel","open19","open");
        runtime.addBoundMethod("org.jruby.RubyKernel","rbThrow19","throw");
        runtime.addBoundMethod("org.jruby.RubyKernel","public_methods19","public_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","rand19","rand");
        runtime.addBoundMethod("org.jruby.RubyKernel","proc_1_9","proc");
        runtime.addBoundMethod("org.jruby.RubyKernel","untrust","untrust");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_float19","Float");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_rational","Rational");
        runtime.addBoundMethod("org.jruby.RubyKernel","fork19","fork");
        runtime.addBoundMethod("org.jruby.RubyKernel","initialize_dup","initialize_dup");
        runtime.addBoundMethod("org.jruby.RubyKernel","eval19","eval");
        runtime.addBoundMethod("org.jruby.RubyKernel","untrusted_p","untrusted?");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_methods19","singleton_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","singleton_class","singleton_class");
        runtime.addBoundMethod("org.jruby.RubyKernel","respond_to_p19","respond_to?");
        runtime.addBoundMethod("org.jruby.RubyKernel","public_send","public_send");
        runtime.addBoundMethod("org.jruby.RubyKernel","public_method","public_method");
        runtime.addBoundMethod("org.jruby.RubyKernel","op_not_match","!~");
        runtime.addBoundMethod("org.jruby.RubyKernel","system19","system");
        runtime.addBoundMethod("org.jruby.RubyKernel","protected_methods19","protected_methods");
        runtime.addBoundMethod("org.jruby.RubyKernel","instance_variables19","instance_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_string19","String");
        runtime.addBoundMethod("org.jruby.RubyKernel","local_variables19","local_variables");
        runtime.addBoundMethod("org.jruby.RubyKernel","binding19","binding");
        runtime.addBoundMethod("org.jruby.RubyKernel","method19","method");
        runtime.addBoundMethod("org.jruby.RubyKernel","require19","require");
        runtime.addBoundMethod("org.jruby.RubyKernel","load19","load");
        runtime.addBoundMethod("org.jruby.RubyKernel","new_integer19","Integer");
        }
    }
    static {
        ASTInspector.addFrameAwareMethods("throw","block_given?","__method__","__callee__","iterator?");
        ASTInspector.addScopeAwareMethods("sub","chomp!","gsub!","chop!","sub!");
     }
}
