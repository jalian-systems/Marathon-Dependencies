/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$ext$openssl$SSLSocket$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        Ruby runtime = cls.getRuntime();
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$connect_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "connect_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "connect_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("connect_nonblock", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$pending(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "pending", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "pending", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("pending", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$1$sysread_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysread_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "sysread_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sysread_nonblock", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$1$0$syswrite_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "syswrite_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "syswrite_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("syswrite_nonblock", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$sysclose(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "sysclose", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "sysclose", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("sysclose", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$1$0$session_set(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "session_set", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "session_set", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("session_set", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$cert(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "cert", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "cert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("cert", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$session_reused_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "session_reused_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "session_reused_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("session_reused_p", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$connect(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "connect", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "connect", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("connect", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$1$sysread(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "sysread", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "sysread", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("sysread", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$accept(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "accept", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "accept", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("accept", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$accept_nonblock(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "accept_nonblock", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "accept_nonblock", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("accept_nonblock", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$state(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "state", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "state", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("state", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$peer_cert_chain(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "peer_cert_chain", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "peer_cert_chain", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("peer_cert_chain", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$peer_cert(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "peer_cert", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "peer_cert", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("peer_cert", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$cipher(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "cipher", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "cipher", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("cipher", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$verify_result(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "verify_result", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "verify_result", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("verify_result", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$1$0$syswrite(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "syswrite", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "syswrite", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("syswrite", javaMethod);
        javaMethod = new org.jruby.ext.openssl.SSLSocket$INVOKER$i$0$0$_initialize(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "_initialize", false, CallConfiguration.FrameFullScopeNone, false, org.jruby.ext.openssl.SSLSocket.class, "_initialize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject[].class, org.jruby.runtime.Block.class});
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","connect_nonblock","connect_nonblock");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","pending","pending");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","sysread_nonblock","sysread_nonblock");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","syswrite_nonblock","syswrite_nonblock");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","sysclose","sysclose");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","session_set","session_set");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","cert","cert");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","session_reused_p","session_reused_p");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","connect","connect");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","sysread","sysread");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","accept","accept");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","accept_nonblock","accept_nonblock");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","state","state");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","peer_cert_chain","peer_cert_chain");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","peer_cert","peer_cert");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","cipher","cipher");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","verify_result","verify_result");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","syswrite","syswrite");
        runtime.addBoundMethod("org.jruby.ext.openssl.SSLSocket","_initialize","initialize");
    }
    static {
        ASTInspector.addFrameAwareMethods("initialize");
     }
}
