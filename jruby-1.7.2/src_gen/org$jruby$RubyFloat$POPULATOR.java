/* THIS FILE IS GENERATED. DO NOT EDIT */
package org.jruby.gen;
import org.jruby.Ruby;
import org.jruby.RubyModule;
import org.jruby.RubyClass;
import org.jruby.CompatVersion;
import org.jruby.anno.TypePopulator;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Arity;
import org.jruby.runtime.Visibility;
import org.jruby.compiler.ASTInspector;
import java.util.Arrays;
import java.util.List;
public class org$jruby$RubyFloat$POPULATOR extends TypePopulator {
    public void populate(RubyModule cls, Class clazz) {
        JavaMethod javaMethod;
        DynamicMethod moduleMethod;
        RubyClass singletonClass = cls.getSingletonClass();
        CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        Ruby runtime = cls.getRuntime();
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyFloat$INVOKER$s$1$0$induced_from(singletonClass, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "induced_from", true, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "induced_from", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class, org.jruby.runtime.builtin.IRubyObject.class});
        singletonClass.addMethodAtBootTimeOnly("induced_from", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFloat","induced_from","induced_from");
        }
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$to_f(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "to_f", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$ceil(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "ceil", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "ceil", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("ceil", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$round(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "round", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "round", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("round", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_ge(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_ge", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_cmp", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$to_s(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "to_s", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$abs(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "abs", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_equal(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_equal", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$nan_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "nan_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "nan_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("nan?", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_pow(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_pow", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_pow", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$op_uminus(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "op_uminus", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_uminus", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$coerce(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "coerce", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "coerce", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$hash(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "hash", org.jruby.RubyFixnum.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_mul(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_mul", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_plus(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_plus", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$zero_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "zero_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "zero_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_fdiv(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_fdiv", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_fdiv", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_minus(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_minus", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_minus", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$floor(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "floor", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "floor", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("floor", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_le(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_le", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$truncate(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "truncate", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "truncate", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        cls.addMethodAtBootTimeOnly("to_int", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$eql_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "eql_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_gt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_gt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$finite_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "finite_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "finite_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("finite?", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_lt(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_lt", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$infinite_p(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "infinite_p", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "infinite_p", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {});
        cls.addMethodAtBootTimeOnly("infinite?", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFloat","to_f","to_f");
        runtime.addBoundMethod("org.jruby.RubyFloat","ceil","ceil");
        runtime.addBoundMethod("org.jruby.RubyFloat","round","round");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_ge",">=");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_cmp","<=>");
        runtime.addBoundMethod("org.jruby.RubyFloat","to_s","to_s");
        runtime.addBoundMethod("org.jruby.RubyFloat","abs","abs");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_equal","==");
        runtime.addBoundMethod("org.jruby.RubyFloat","nan_p","nan?");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_pow","**");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_uminus","-@");
        runtime.addBoundMethod("org.jruby.RubyFloat","coerce","coerce");
        runtime.addBoundMethod("org.jruby.RubyFloat","hash","hash");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_mul","*");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_plus","+");
        runtime.addBoundMethod("org.jruby.RubyFloat","zero_p","zero?");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_fdiv","/");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_minus","-");
        runtime.addBoundMethod("org.jruby.RubyFloat","floor","floor");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_le","<=");
        runtime.addBoundMethod("org.jruby.RubyFloat","truncate","truncate");
        runtime.addBoundMethod("org.jruby.RubyFloat","eql_p","eql?");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_gt",">");
        runtime.addBoundMethod("org.jruby.RubyFloat","finite_p","finite?");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_lt","<");
        runtime.addBoundMethod("org.jruby.RubyFloat","infinite_p","infinite?");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$divmod(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "divmod", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "divmod", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("divmod", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_mod(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mod", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_mod", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("%", javaMethod);
        cls.addMethodAtBootTimeOnly("modulo", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFloat","divmod","divmod");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_mod","%");
        }
        if (compatVersion.is1_9() || compatVersion == CompatVersion.BOTH) {
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$magnitude(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "magnitude", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "magnitude", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("quo", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$1$rationalize(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "rationalize", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "rationalize", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("rationalize", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$divmod19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "divmod19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "divmod19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("divmod", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_mod19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_mod19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_mod19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("%", javaMethod);
        cls.addMethodAtBootTimeOnly("modulo", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$magnitude(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "magnitude", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "magnitude", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("magnitude", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$1$round(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, -1, "round", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "round", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject[].class});
        cls.addMethodAtBootTimeOnly("round", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$denominator(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "denominator", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "denominator", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("denominator", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$numerator(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "numerator", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "numerator", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("numerator", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$0$0$to_r(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "to_r", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class});
        cls.addMethodAtBootTimeOnly("to_r", javaMethod);
        javaMethod = new org.jruby.RubyFloat$INVOKER$i$1$0$op_pow19(cls, Visibility.PUBLIC);
        populateMethod(javaMethod, 1, "op_pow19", false, CallConfiguration.FrameNoneScopeNone, false, org.jruby.RubyFloat.class, "op_pow19", org.jruby.runtime.builtin.IRubyObject.class, new Class[] {org.jruby.runtime.ThreadContext.class, org.jruby.runtime.builtin.IRubyObject.class});
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFloat","magnitude","quo");
        runtime.addBoundMethod("org.jruby.RubyFloat","rationalize","rationalize");
        runtime.addBoundMethod("org.jruby.RubyFloat","divmod19","divmod");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_mod19","%");
        runtime.addBoundMethod("org.jruby.RubyFloat","magnitude","magnitude");
        runtime.addBoundMethod("org.jruby.RubyFloat","round","round");
        runtime.addBoundMethod("org.jruby.RubyFloat","denominator","denominator");
        runtime.addBoundMethod("org.jruby.RubyFloat","numerator","numerator");
        runtime.addBoundMethod("org.jruby.RubyFloat","to_r","to_r");
        runtime.addBoundMethod("org.jruby.RubyFloat","op_pow19","**");
        }
    }
    static {
     }
}
